{
  "comment": "This file is a snapshot of the application state. You can ask the AI to use this file to revert any unwanted changes.",
  "files": {
    "src/app/page.tsx": "import HomeRedirect from '@/components/home-redirect';\nimport { Suspense } from 'react';\n\nexport default function Home() {\n  return (\n    <Suspense fallback={null}>\n      <HomeRedirect />\n    </Suspense>\n  );\n}\n",
    "src/app/[uuid]/page.tsx": "import { Suspense } from 'react';\nimport HomePageClient from '@/components/home-page-client';\n\nexport default async function UuidPage({ params }: { params: { uuid: string } }) {\n  return (\n    <Suspense fallback={\n      <div className=\"relative flex flex-col min-h-screen bg-background text-foreground font-body items-center justify-center\">\n        <div className=\"relative w-24 h-24\">\n          <svg\n            className=\"animate-spin h-full w-full text-primary\"\n            xmlns=\"http://www.w3.org/2000/svg\"\n            fill=\"none\"\n            viewBox=\"0 0 100 100\"\n          >\n            <path\n              d=\"M 50,10 A 40,40 0 1 1 10,50\"\n              fill=\"none\"\n              stroke=\"currentColor\"\n              strokeWidth=\"10\"\n              strokeLinecap=\"round\"\n            />\n          </svg>\n        </div>\n      </div>\n    }>\n      <HomePageClient uuid={params.uuid} />\n    </Suspense>\n  );\n}\n",
    "src/app/admin/page.tsx": "import { Suspense } from 'react';\nimport TrafficClient from './traffic-client';\nimport { Button } from '@/components/ui/button';\nimport Link from 'next/link';\nimport { ArrowLeft, CheckCircle, Users, PhoneForwarded } from 'lucide-react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { getTraffic, type TrafficData } from '@/ai/flows/log-traffic-flow';\nimport { isThisMonth, parseISO, subMonths, isSameMonth } from 'date-fns';\n\ninterface MonthlyStats {\n  selfEnrollCompletions: number;\n  agentHandoffs: number;\n  visitsThisMonth: number;\n  visitsLastMonth: number;\n}\n\nasync function getStats(trafficData: TrafficData[]): Promise<MonthlyStats> {\n    const now = new Date();\n    const lastMonth = subMonths(now, 1);\n\n    const uniqueUuidsThisMonth = new Set<string>();\n    const uniqueUuidsLastMonth = new Set<string>();\n    const selfEnrolledThisMonthUuids = new Set<string>();\n    const agentHandoffThisMonthUuids = new Set<string>();\n\n    trafficData.forEach(item => {\n        const timestamp = parseISO(item.timestamp);\n        if (isThisMonth(timestamp)) {\n            uniqueUuidsThisMonth.add(item.uuid);\n            if (item.step === 8) {\n                selfEnrolledThisMonthUuids.add(item.uuid);\n            }\n            if (item.step === 9) {\n                agentHandoffThisMonthUuids.add(item.uuid);\n            }\n        }\n        if (isSameMonth(timestamp, lastMonth)) {\n            uniqueUuidsLastMonth.add(item.uuid);\n        }\n    });\n\n    return {\n      selfEnrollCompletions: selfEnrolledThisMonthUuids.size,\n      agentHandoffs: agentHandoffThisMonthUuids.size,\n      visitsThisMonth: uniqueUuidsThisMonth.size,\n      visitsLastMonth: uniqueUuidsLastMonth.size,\n    };\n}\n\n\nexport default async function AdminPage() {\n  const initialTrafficData = await getTraffic();\n  const stats = await getStats(initialTrafficData);\n  \n  const lastMonthChange = stats.visitsThisMonth - stats.visitsLastMonth;\n  const lastMonthChangePercentage = stats.visitsLastMonth > 0\n    ? ((lastMonthChange / stats.visitsLastMonth) * 100).toFixed(1)\n    : stats.visitsThisMonth > 0 ? '100.0' : '0.0';\n\n\n  return (\n    <div className=\"min-h-screen bg-background text-foreground p-4 sm:p-8\">\n      <div className=\"max-w-7xl mx-auto\">\n        <div className=\"flex flex-wrap justify-between items-center mb-8 gap-4\">\n          <h1 className=\"text-3xl font-bold\">Application Traffic</h1>\n          <Link href=\"/\" passHref>\n            <Button variant=\"outline\">\n              <ArrowLeft className=\"mr-2 h-4 w-4\" />\n              Back to App\n            </Button>\n          </Link>\n        </div>\n\n        <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-4 mb-8\">\n            <Card>\n                <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                    <CardTitle className=\"text-sm font-medium\">Total Visits This Month</CardTitle>\n                    <Users className=\"h-4 w-4 text-muted-foreground\" />\n                </CardHeader>\n                <CardContent>\n                    <div className=\"text-2xl font-bold\">{stats.visitsThisMonth}</div>\n                     <p className=\"text-xs text-muted-foreground\">\n                        {lastMonthChange >= 0 ? '+' : ''}{lastMonthChangePercentage}% from last month\n                    </p>\n                </CardContent>\n            </Card>\n            <Card>\n                <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                    <CardTitle className=\"text-sm font-medium\">Self-Enrolled This Month</CardTitle>\n                    <CheckCircle className=\"h-4 w-4 text-muted-foreground\" />\n                </CardHeader>\n                <CardContent>\n                    <div className=\"text-2xl font-bold\">{stats.selfEnrollCompletions}</div>\n                    <p className=\"text-xs text-muted-foreground\">\n                        Fully automated completions\n                    </p>\n                </CardContent>\n            </Card>\n            <Card>\n                <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                    <CardTitle className=\"text-sm font-medium\">Agent Handoffs This Month</CardTitle>\n                    <PhoneForwarded className=\"h-4 w-4 text-muted-foreground\" />\n                </CardHeader>\n                <CardContent>\n                    <div className=\"text-2xl font-bold\">{stats.agentHandoffs}</div>\n                    <p className=\"text-xs text-muted-foreground\">\n                        Applications needing agent follow-up\n                    </p>\n                </CardContent>\n            </Card>\n             <Card>\n                <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                    <CardTitle className=\"text-sm font-medium\">Total Visits Last Month</CardTitle>\n                    <Users className=\"h-4 w-4 text-muted-foreground\" />\n                </CardHeader>\n                <CardContent>\n                    <div className=\"text-2xl font-bold\">{stats.visitsLastMonth}</div>\n                     <p className=\"text-xs text-muted-foreground\">\n                        Total unique visitors last month\n                    </p>\n                </CardContent>\n            </Card>\n        </div>\n\n        <Suspense fallback={<p>Loading traffic data...</p>}>\n          <TrafficClient initialData={initialTrafficData} />\n        </Suspense>\n      </div>\n    </div>\n  );\n}\n",
    "src/components/home-page-client.tsx": "'use client';\n\nimport { useState, useEffect, useCallback } from 'react';\nimport { useSearchParams, useRouter } from 'next/navigation';\nimport { useForm, FormProvider, FieldErrors } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport Link from 'next/link';\n\nimport { \n  fullFormSchema, \n  insuranceFormSchema, \n  additionalQuestionsObjectSchema,\n  beneficiaryFormSchema, \n  paymentFormSchema,\n  type FormValues,\n  type InsuranceFormValues,\n  type AdditionalQuestionsFormValues,\n  type BeneficiaryFormValues,\n  type PaymentFormValues\n} from '@/lib/schema';\nimport { submitApplication } from '@/ai/flows/submit-application-flow';\nimport { submitLead } from '@/ai/flows/submit-lead-flow';\nimport { submitApplicationLead } from '@/ai/flows/submit-application-lead-flow';\nimport { logTrafficWithLocation } from '@/ai/flows/log-traffic-flow';\nimport { useToast } from '@/hooks/use-toast';\nimport { useSocket } from '@/hooks/use-socket';\n\nimport { Logo, Icon } from '@/components/logo';\nimport InsuranceForm from '@/components/insurance-form';\nimport AdditionalQuestionsForm from '@/components/additional-questions-form';\nimport BeneficiaryForm from '@/components/beneficiary-form';\nimport PaymentForm from '@/components/payment-form';\nimport ThankYou from '@/components/thank-you';\nimport SelfEnrollLoading from '@/components/self-enroll-loading';\nimport SelfEnrollContract from '@/components/self-enroll-contract';\nimport SelfEnrollComplete from '@/components/self-enroll-complete';\nimport AgentHandoffComplete from '@/components/agent-handoff-complete';\nimport FormNavigation from '@/components/form-navigation';\nimport { cn } from '@/lib/utils';\nimport { submitToSlack } from '@/ai/flows/submit-slack';\n\nconst stepFields: (keyof FormValues)[][] = [\n  Object.keys(insuranceFormSchema.shape) as (keyof InsuranceFormValues)[],\n  Object.keys(additionalQuestionsObjectSchema.shape) as (keyof AdditionalQuestionsFormValues)[],\n  Object.keys(beneficiaryFormSchema.shape) as (keyof BeneficiaryFormValues)[],\n  Object.keys(paymentFormSchema.shape) as (keyof PaymentFormValues)[],\n];\n\nexport default function HomePageClient({ uuid }: { uuid: string }) {\n  const [step, setStep] = useState(1);\n  const [animationClass, setAnimationClass] = useState('animate-fade-in-up');\n  const [isAnimatingOut, setIsAnimatingOut] = useState(false);\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [pin, setPin] = useState('');\n  const [phoneLastFour, setPhoneLastFour] = useState('');\n  const searchParams = useSearchParams();\n  const router = useRouter();\n  const { toast } = useToast();\n  \n  const form = useForm<FormValues>({\n    resolver: zodResolver(fullFormSchema),\n    mode: 'onTouched',\n    defaultValues: {\n      firstName: '',\n      lastName: '',\n      phone: '',\n      email: '',\n      dob: '',\n      lastFour: '',\n      gender: '',\n      differentOwner: 'no',\n      healthQuestion1: 'no',\n      healthQuestion2: 'no',\n      healthQuestion3: 'no',\n      tobaccoUse: 'no',\n      existingPolicies: 'no',\n      otherHealthIssues: 'no',\n      otherHealthIssuesDetails: '',\n      addressStreet: \"\",\n      addressApt: \"\",\n      addressCity: \"\",\n      addressState: \"\",\n      addressZip: \"\",\n      effectiveDate: \"\",\n      beneficiaryFirstName: \"\",\n      beneficiaryLastName: \"\",\n      beneficiaryPhone: \"\",\n      beneficiaryDob: \"\",\n      beneficiaryRelation: \"\",\n      faceAmount: \"\",\n      paymentAccountHolderName: \"\",\n      paymentAccountNumber: \"\",\n      paymentRoutingNumber: \"\",\n    },\n  });\n\n  const { formState: { errors } } = form;\n\n  const changeStep = useCallback((newStep: number) => {\n    if (newStep === step) return;\n\n    logTrafficWithLocation({ uuid, step: newStep });\n\n    setIsAnimatingOut(true);\n    setAnimationClass('animate-fade-out-down');\n\n    setTimeout(() => {\n      setStep(newStep);\n      setIsAnimatingOut(false);\n      setAnimationClass('animate-fade-in-up');\n    }, 300);\n  }, [step, uuid]);\n  \n  useEffect(() => {\n    logTrafficWithLocation({ uuid, step: 1 });\n  }, [uuid]);\n\n  useEffect(() => {\n    const stepParam = searchParams.get('step');\n    if (stepParam) {\n      const stepNumber = parseInt(stepParam, 10);\n      if (!isNaN(stepNumber) && stepNumber >= 1 && stepNumber <= 9) {\n        changeStep(stepNumber);\n      }\n    }\n  }, [searchParams, changeStep]);\n  \n  const handleNext = async () => {\n    const fields = stepFields[step - 1];\n    const output = await form.trigger(fields, { shouldFocus: true });\n    \n    if (!output) return;\n    \n    if (step === 3) {\n      // This is the integration point for LEAD_URL\n      // We don't await this or handle errors in the UI, it's a \"fire-and-forget\" call\n      submitLead(form.getValues());\n      submitToSlack({\n        step: 'Form 3 Lead',\n        formData: {\n          referenceId: uuid,\n          ...form.getValues(),\n        }});\n    }\n\n    if (step === 4) {\n      form.handleSubmit(processForm)();\n    } else {\n      changeStep(step + 1);\n    }\n  };\n\n  const handleBack = () => {\n    changeStep(step - 1);\n  };\n  \n  const processForm = async (data: FormValues) => {\n    // This is the integration point for APPLICATION_LEAD_URL\n    // We don't await this or handle errors in the UI, it's a \"fire-and-forget\" call\n    submitApplicationLead(data);\n    submitToSlack({\n      step: 'Form 4 Application Lead',\n      formData: {\n        referenceId: uuid,\n        ...data\n      }});\n    changeStep(5);\n  };\n  \n  const handleSelfEnrollSubmit = async (data: FormValues) => {\n    setIsSubmitting(true);\n    try {\n      submitToSlack({\n        step: 'Self-Enrollment',\n        formData: {\n          ...data,\n          referenceId: uuid,\n        }});\n      const result = await submitApplication({ ...data, referenceId: uuid });\n\n      if (result.success) {\n        changeStep(6);\n      } else {\n        toast({\n          variant: \"destructive\",\n          title: \"Submission Failed\",\n          description: result.message,\n        });\n        changeStep(5);\n      }\n    } catch (error) {\n      toast({\n        variant: \"destructive\",\n        title: \"An unexpected error occurred.\",\n        description: \"Please try again later.\",\n      });\n      changeStep(5);\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  const handleSelfEnrollError = (formErrors: FieldErrors<FormValues>) => {\n    toast({\n      variant: \"destructive\",\n      title: \"Incomplete Application\",\n      description: \"Please complete all required fields before submitting.\",\n    });\n    \n    const firstErrorField = Object.keys(formErrors)[0] as keyof FormValues;\n    const stepWithError = stepFields.findIndex(fields => fields.includes(firstErrorField));\n    \n    if (stepWithError !== -1) {\n      changeStep(stepWithError + 1);\n    }\n  };\n\n  const handleSpeakToAgent = () => {\n    changeStep(9);\n  };\n  \n  const handleSocketUpdate = useCallback((data: any) => {\n    if (data.error) {\n       toast({\n          variant: \"destructive\",\n          title: data.error.title,\n          description: data.error.message,\n       });\n       changeStep(5);\n       return;\n    }\n\n    if (data.msg && typeof data.msg === 'string') {\n        try {\n            const payload = JSON.parse(data.msg);\n            const { currentStep, pin, phoneLastFour, isError, error } = payload;\n            \n            if (pin) setPin(pin);\n            if (phoneLastFour) setPhoneLastFour(phoneLastFour);\n\n            if (currentStep === 'sms-verification' || currentStep === 'CONTRACT_READY') {\n              changeStep(7);\n            } else if (currentStep === 'ENROLLMENT_COMPLETE' || currentStep === 'processing' || currentStep === 'RESULT_SUCCESS') {\n              changeStep(8);\n            } else if (currentStep === 'RESULT_FAILED' || (isError && error)) {\n                toast({\n                    variant: \"destructive\",\n                    title: \"Enrollment Failed\",\n                    description: error || \"An error occurred during enrollment.\",\n                });\n                changeStep(5);\n            }\n        } catch (e) {\n            console.error(\"Error parsing socket message\", e);\n            toast({\n                variant: \"destructive\",\n                title: \"Error\",\n                description: \"Received an invalid message from the server.\"\n            });\n            changeStep(5);\n        }\n    }\n  }, [changeStep, toast]);\n\n  const subscribeId = (step >= 6 && step <= 7) ? uuid : null;\n  useSocket(subscribeId, handleSocketUpdate);\n\n  const handleStepChange = (newStep: number) => {\n    changeStep(newStep);\n  };\n\n  const renderStep = () => {\n    switch (step) {\n      case 1:\n        return <InsuranceForm />;\n      case 2:\n        return <AdditionalQuestionsForm />;\n      case 3:\n        return <BeneficiaryForm />;\n      case 4:\n        return <PaymentForm />;\n      case 5:\n        return <ThankYou onSelfEnroll={() => form.handleSubmit(handleSelfEnrollSubmit, handleSelfEnrollError)()} onSpeakToAgent={handleSpeakToAgent} />;\n      case 6:\n        return <SelfEnrollLoading />;\n      case 7:\n        return <SelfEnrollContract pin={pin} phoneLastFour={phoneLastFour} />;\n      case 8:\n        return <SelfEnrollComplete />;\n      case 9:\n        return <AgentHandoffComplete />;\n      default:\n        return <InsuranceForm />;\n    }\n  };\n\n  const showHeader = step <= 5;\n  const showNavigation = step >= 1 && step <= 4;\n\n  const getErrorMessage = () => {\n    if (step < 1 || step > stepFields.length) return null;\n    const currentStepFields = stepFields[step - 1];\n    if (!currentStepFields) return null;\n\n    for (const field of currentStepFields) {\n      if (errors[field]) {\n        return errors[field]?.message as string;\n      }\n    }\n    \n    return null;\n  }\n  \n  const errorMessage = getErrorMessage();\n\n  return (\n    <div className=\"relative flex flex-col min-h-screen bg-background text-foreground font-body\">\n      <header className=\"absolute top-0 left-0 p-8 md:p-12 hidden md:block\">\n        <Logo />\n      </header>\n\n      <main className=\"flex-1 flex flex-col items-center justify-center w-full px-8 sm:px-12 text-center\">\n        <div className=\"max-w-4xl w-full flex flex-col items-center\">\n            {showHeader && (\n              <div className=\"flex flex-col items-center pt-24\">\n                <Icon className=\"h-20 w-20 md:h-36 md:w-36 text-accent mb-2 md:mb-8\" />\n                <h1 className=\"font-headline text-3xl md:text-5xl tracking-tight mb-8 leading-tight max-w-2xl\">\n                    State and Congress Approved Final Expense Benefits Emergency Funds\n                </h1>\n                <p className=\"text-base text-foreground/80 mb-8 max-w-[55rem]\">\n                  {step === 5\n                    ? \"We have all of the information necessary. How would you like to complete your application?\"\n                    : \"Amounts between $5,000 - $25,000 / Available to anyone ages 45-80\"}\n                </p>\n              </div>\n            )}\n\n            <div className=\"w-full flex justify-center\">\n              <FormProvider {...form}>\n                <form onSubmit={form.handleSubmit(processForm)} className={cn(\"w-full flex flex-col items-center\", animationClass)}>\n                  {renderStep()}\n\n                  {showNavigation && (\n                    <div className=\"w-full max-w-2xl\">\n                        <FormNavigation\n                        onBack={handleBack}\n                        onNext={handleNext}\n                        backButton={step > 1}\n                        isSubmit={step === 4}\n                        actionLabel={step === 4 ? \"SUBMIT\" : \"NEXT\"}\n                        disabled={isSubmitting}\n                        errorMessage={errorMessage}\n                        />\n                    </div>\n                  )}\n                </form>\n              </FormProvider>\n            </div>\n        </div>\n      </main>\n\n      <footer className=\"w-full py-8 text-center\">\n        <p className=\"text-xs text-foreground/60\">\n          All information provided is private{\" \"}\n          <Link href=\"/admin\" className=\"cursor-pointer\">and</Link>\n          {\" \"}securely protected.\n        </p>\n      </footer>\n    </div>\n  );\n}\n",
    "src/lib/schema.ts": "import { z } from 'zod';\nimport { differenceInYears, parse, isValid, format } from 'date-fns';\n\nexport const insuranceFormSchema = z.object({\n  firstName: z.string().min(1, { message: \"First name is required.\" }),\n  lastName: z.string().min(1, { message: \"Last name is required.\" }),\n  phone: z.string().min(14, { message: \"Please enter a complete phone number.\" }),\n  email: z.string().min(1, { message: \"Email is required.\" }).email({ message: \"Invalid email address.\" }),\n  dob: z.string()\n    .min(10, { message: \"Please enter a complete date of birth.\" })\n    .refine((dob) => isValid(parse(dob, 'MM/dd/yyyy', new Date())), {\n      message: \"Invalid date. Please use MM/dd/yyyy format.\",\n    })\n    .refine((dob) => {\n        const parsedDate = parse(dob, 'MM/dd/yyyy', new Date());\n        if (!isValid(parsedDate)) return false;\n        const age = differenceInYears(new Date(), parsedDate);\n        return age >= 45 && age <= 80;\n    }, {\n        message: \"You must be between 45 and 80 years old to be eligible.\"\n    }),\n  gender: z.string().min(1, { message: \"Please select a gender.\" }),\n});\nexport type InsuranceFormValues = z.infer<typeof insuranceFormSchema>;\n\nexport const additionalQuestionsObjectSchema = z.object({\n  differentOwner: z.string().min(1, { message: \"Please select an option.\" }),\n  healthQuestion1: z.string().min(1, { message: \"This question is required.\" }),\n  healthQuestion2: z.string().min(1, { message: \"This question is required.\" }),\n  healthQuestion3: z.string().min(1, { message: \"This question is required.\" }),\n  tobaccoUse: z.string().min(1, { message: 'This question is required.' }),\n  existingPolicies: z.string().min(1, { message: 'This question is required.' }),\n  otherHealthIssues: z.string().min(1, { message: 'This question is required.' }),\n  otherHealthIssuesDetails: z.string().optional(),\n});\nexport type AdditionalQuestionsFormValues = z.infer<typeof additionalQuestionsObjectSchema>;\n\n\nexport const beneficiaryFormSchema = z.object({\n  addressStreet: z.string().min(1, { message: \"Address is required.\" }),\n  addressApt: z.string().optional(),\n  addressCity: z.string().min(1, { message: \"City is required.\" }),\n  addressState: z.string().length(2, { message: \"State must be a 2-letter abbreviation.\" }),\n  addressZip: z.string().min(1, { message: \"Zip code is required.\" }),\n  beneficiaryFirstName: z.string().min(1, { message: \"First name is required.\" }),\n  beneficiaryLastName: z.string().min(1, { message: \"Last name is required.\" }),\n  beneficiaryPhone: z.string().optional(),\n  beneficiaryDob: z.string().optional().refine((dob) => {\n    if (!dob || dob === \"\") return true; // Optional field is valid if empty\n    // If a value is present, it must be a complete and valid date\n    return dob.length === 10 && isValid(parse(dob, 'MM/dd/yyyy', new Date()));\n  }, {\n    message: \"Invalid date. Please use MM/dd/yyyy format.\",\n  }),\n  beneficiaryRelation: z.string().min(1, { message: \"Relationship is required.\" }),\n  faceAmount: z.string().min(1, { message: \"Coverage amount is required.\" }),\n  effectiveDate: z.string().optional().refine((date) => {\n    if (!date || date === \"\") return true; // Optional field\n    if (date.length !== 10) return false; // Must be full date if entered\n    const parsedDate = parse(date, 'MM/dd/yyyy', new Date());\n    if (!isValid(parsedDate)) return false; // Must be a valid date\n    const today = new Date();\n    today.setHours(0, 0, 0, 0);\n    return parsedDate >= today; // Must be today or future\n  }, {\n    message: \"Date must be valid (MM/dd/yyyy) and not in the past.\",\n  }),\n});\nexport type BeneficiaryFormValues = z.infer<typeof beneficiaryFormSchema>;\n\nexport const paymentFormSchema = z.object({\n  paymentAccountHolderName: z.string().min(1, { message: \"Account holder name is required.\" }),\n  paymentAccountNumber: z.string().min(1, { message: \"Account number is required.\" }),\n  paymentRoutingNumber: z.string().length(9, { message: \"A valid 9-digit routing number is required.\" }),\n  lastFour: z.string().length(4, { message: \"Please enter the last 4 digits of your SSN.\" }),\n});\nexport type PaymentFormValues = z.infer<typeof paymentFormSchema>;\n\nexport const fullFormSchema = insuranceFormSchema\n .merge(additionalQuestionsObjectSchema)\n .merge(beneficiaryFormSchema)\n .merge(paymentFormSchema);\n\nexport type FormValues = z.infer<typeof fullFormSchema>;\n\n\n// Centralized API Payload Logic\n\n// 1. Define the FLAT payload schema that the API expects.\nexport const FinalPayloadSchema = z.object({\n  referenceId: z.string().uuid().optional(),\n  email: z.string().email().optional(),\n  firstName: z.string().min(1).optional(),\n  lastName: z.string().min(1).optional(),\n  addressStreet: z.string().min(1).optional(),\n  addressCity: z.string().min(1).optional(),\n  addressState: z.string().length(2).optional(),\n  addressZip: z.string().min(1).optional(),\n  dob: z.string().optional(), // Formatted as MM/dd/yyyy\n  phone: z.string().optional(), // Digits only\n  lastFour: z.string().regex(/^\\d{4}$/).optional(), // Last 4 of SSN\n  gender: z.string().optional(),\n  beneficiaryFirstName: z.string().min(1).optional(),\n  beneficiaryLastName: z.string().min(1).optional(),\n  beneficiaryRelation: z.string().min(1).optional(),\n  beneficiaryDob: z.string().optional(), // Formatted as MM/dd/yyyy\n  beneficiaryPhone: z.string().optional(), // Digits only\n  beneficiaryPercentage: z.string().optional(),\n  faceAmount: z.string().optional(),\n  paymentAccountHolderName: z.string().min(1).optional(),\n  paymentRoutingNumber: z.string().length(9).optional(),\n  paymentAccountNumber: z.string().min(1).optional(),\n  // Health and Policy Questions\n  differentOwner: z.string().optional(),\n  healthQuestion1: z.string().optional(),\n  healthQuestion2: z.string().optional(),\n  healthQuestion3: z.string().optional(),\n  tobaccoUse: z.string().optional(),\n  existingPolicies: z.string().optional(),\n  otherHealthIssues: z.string().optional(),\n  otherHealthIssuesDetails: z.string().optional(),\n  effectiveDate: z.string().optional(), // Formatted as MM/dd/yyyy\n}).partial(); // Make all fields optional to handle partial form data\nexport type FinalPayload = z.infer<typeof FinalPayloadSchema>;\n\n\nexport const formatPhone = (phoneString?: string) => {\n  if (!phoneString) return '';\n  return phoneString.replace(/\\D/g, '');\n};\n\nexport const capitalize = (s?: string) => {\n  if (!s || s.length === 0) return '';\n  return s.charAt(0).toUpperCase() + s.slice(1);\n};\n\nexport const getFullStreet = (street?: string, apt?: string) => {\n  if (!street) return '';\n  if (apt && apt.trim() !== '') {\n    return `${street}, ${apt}`;\n  }\n  return street;\n};\n\n\n// 2. Create the dedicated, pure transformation function to build the FLAT payload.\nexport function transformDataForApi(formData: Partial<FormValues>): FinalPayload {\n  const formatDate = (dateString?: string) => {\n    if (!dateString) return '';\n    if (!/^\\d{4}-\\d{2}-\\d{2}$/.test(dateString) && !/^\\d{2}\\/\\d{2}\\/\\d{4}$/.test(dateString)) return dateString;\n    if (dateString.includes('/')) return dateString; // Already in MM/dd/yyyy\n    const [year, month, day] = dateString.split('-');\n    const formatted = `${month}/${day}/${year}`;\n    return formatted;\n  };\n  \n  const formatEffectiveDate = (dateString?: string) => {\n    if (dateString) {\n      return formatDate(dateString);\n    }\n    return format(new Date(), 'MM/dd/yyyy');\n  };\n\n  const rawData: Record<string, any> = {\n    referenceId: (formData as any).referenceId, // For final submission\n    email: formData.email,\n    firstName: formData.firstName,\n    lastName: formData.lastName,\n    addressStreet: getFullStreet(formData.addressStreet, formData.addressApt),\n    addressCity: formData.addressCity,\n    addressState: formData.addressState,\n    addressZip: formData.addressZip,\n    dob: formatDate(formData.dob),\n    phone: formatPhone(formData.phone),\n    lastFour: formData.lastFour,\n    gender: capitalize(formData.gender),\n    beneficiaryFirstName: formData.beneficiaryFirstName,\n    beneficiaryLastName: formData.beneficiaryLastName,\n    beneficiaryDob: formatDate(formData.beneficiaryDob),\n    beneficiaryPhone: formatPhone(formData.beneficiaryPhone),\n    beneficiaryRelation: formData.beneficiaryRelation,\n    beneficiaryPercentage: \"100\",\n    faceAmount: formData.faceAmount ? formData.faceAmount.replace(/[^0-9]/g, '') : '',\n    paymentAccountHolderName: formData.paymentAccountHolderName,\n    paymentRoutingNumber: formData.paymentRoutingNumber,\n    paymentAccountNumber: formData.paymentAccountNumber,\n    differentOwner: formData.differentOwner || 'no',\n    healthQuestion1: formData.healthQuestion1 || 'no',\n    healthQuestion2: formData.healthQuestion2 || 'no',\n    healthQuestion3: formData.healthQuestion3 || 'no',\n    tobaccoUse: formData.tobaccoUse || 'no',\n    existingPolicies: formData.existingPolicies || 'no',\n    otherHealthIssues: formData.otherHealthIssues || 'no',\n    otherHealthIssuesDetails: formData.otherHealthIssuesDetails,\n    effectiveDate: formatEffectiveDate(formData.effectiveDate),\n  };\n  \n  return FinalPayloadSchema.parse(rawData);\n}\n\n// 3. Create a dedicated transformation for the LEAD API call.\n// This function prepares the data for the step 3 lead submission.\n// It removes payment-related fields to avoid validation errors for data that hasn't been collected yet.\nexport function transformDataForLeadApi(formData: Partial<FormValues>): Omit<FinalPayload, 'paymentAccountHolderName' | 'paymentRoutingNumber' | 'paymentAccountNumber' | 'lastFour'> {\n  // First, get the fully transformed payload\n  const fullPayload = transformDataForApi({\n    ...formData,\n    lastFour: undefined,\n    paymentAccountHolderName: undefined,\n    paymentRoutingNumber: undefined,\n    paymentAccountNumber: undefined,\n  });\n  \n  // Then, destructure to remove the payment fields.\n  const { \n    paymentAccountHolderName, \n    paymentRoutingNumber, \n    paymentAccountNumber, \n    lastFour, \n    ...leadPayload // The rest of the object is what we want\n  } = fullPayload;\n\n  return leadPayload;\n}\n",
    "tests/components/home-page-client.test.tsx": "import { render, screen, fireEvent, waitFor, getByRole as getByRoleInElement } from '@testing-library/react';\nimport userEvent from '@testing-library/user-event';\nimport { describe, it, expect, vi, beforeEach } from 'vitest';\nimport HomePageClient from '@/components/home-page-client';\nimport { Toaster } from '@/components/ui/toaster';\n\n// Mocking necessary modules and hooks\nvi.mock('next/navigation', () => ({\n  useRouter: () => ({\n    push: vi.fn(),\n    replace: vi.fn(),\n  }),\n  useSearchParams: () => ({\n    get: vi.fn(),\n  }),\n}));\n\n// Declare mocks that will be used in the factories\nlet logTrafficWithLocation: any;\nlet submitLead: any;\nlet submitApplicationLead: any;\nlet submitToSlack: any;\n\nvi.mock('@/ai/flows/log-traffic-flow', () => ({\n  logTrafficWithLocation: vi.fn(),\n}));\n\nvi.mock('@/ai/flows/submit-lead-flow', () => ({\n  submitLead: vi.fn(),\n}));\n\nvi.mock('@/ai/flows/submit-application-lead-flow', () => ({\n    submitApplicationLead: vi.fn(),\n}));\n\nvi.mock('@/ai/flows/submit-slack', () => ({\n    submitToSlack: vi.fn(),\n}));\n\n\nvi.mock('@/hooks/use-socket', () => ({\n  useSocket: vi.fn(() => ({\n    // Mock whatever the hook returns, likely null or an empty object\n  })),\n}));\n\n// A wrapper component to include the Toaster, as it's a dependency\nconst TestWrapper = ({ uuid }: { uuid: string }) => (\n  <>\n    <HomePageClient uuid={uuid} />\n    <Toaster />\n  </>\n);\n\n// Consolidated Helper functions\nconst fillStepOne = async () => {\n  await userEvent.type(screen.getByPlaceholderText('First Name'), 'Jane');\n  await userEvent.type(screen.getByPlaceholderText('Last Name'), 'Doe');\n  await userEvent.type(screen.getByPlaceholderText('Valid Phone Number'), '5551234567');\n  await userEvent.type(screen.getByPlaceholderText('Email'), 'jane.doe@example.com');\n  await userEvent.type(screen.getByPlaceholderText('Birthdate'), '01/01/1970');\n  const genderSelect = screen.getByRole('combobox');\n  await userEvent.click(genderSelect);\n  const listbox = await screen.findByRole('listbox');\n  await userEvent.click(getByRoleInElement(listbox, 'option', { name: 'Female' }));\n  await userEvent.click(screen.getByRole('button', { name: /NEXT/i }));\n};\n\nconst fillStepTwo = async () => {\n  await fillStepOne();\n  await waitFor(() => {\n    expect(screen.getByText(/Is the policy owner different than the insured/i)).toBeInTheDocument();\n  });\n\n  const questions = [\n    /Is the policy owner different than the insured/i,\n    /Have you ever been diagnosed or treated for HIV, AIDS/i,\n    /Have you ever used oxygen or dialysis for any condition/i,\n    /In the last 5 years, have you had cancer/i,\n    /Have you used any nicotine products in the past 12 months/i,\n    /Do you have any existing life or annuity policies/i,\n    /Do you have any other health issues/i\n  ];\n\n  for (const questionText of questions) {\n    const questionElement = screen.getByText(questionText);\n    const formItem = questionElement.closest('.bg-card\\\\/50');\n    if (!formItem) throw new Error(`Could not find form item for question: ${questionText}`);\n    \n    const noButton = getByRoleInElement(formItem as HTMLElement, 'button', { name: \"No\" });\n    await userEvent.click(noButton);\n  }\n  await userEvent.click(screen.getByRole('button', { name: /NEXT/i }));\n};\n\nconst fillStepThree = async () => {\n    await fillStepTwo();\n    await waitFor(() => {\n        expect(screen.getByPlaceholderText(\"Applicant's Primary Address\")).toBeInTheDocument();\n    });\n\n    await userEvent.type(screen.getByPlaceholderText(\"Applicant's Primary Address\"), \"123 Main St\");\n    await userEvent.type(screen.getByPlaceholderText(\"City\"), \"Anytown\");\n    await userEvent.type(screen.getByPlaceholderText(\"Zip Code\"), \"12345\");\n    \n    const stateSelect = screen.getByRole('combobox', { name: /state/i });\n    await userEvent.click(stateSelect);\n    const stateListbox = await screen.findByRole('listbox');\n    await userEvent.click(getByRoleInElement(stateListbox, 'option', { name: 'California' }));\n    \n    await userEvent.type(screen.getByPlaceholderText(\"Beneficiary First Name\"), \"Ben\");\n    await userEvent.type(screen.getByPlaceholderText(\"Beneficiary Last Name\"), \"Ficiary\");\n\n    const relationSelect = screen.getByRole('combobox', { name: /relationship/i });\n    await userEvent.click(relationSelect);\n    const relationListbox = await screen.findByRole('listbox');\n    await userEvent.click(getByRoleInElement(relationListbox, 'option', { name: 'Spouse' }));\n\n    const coverageSelect = screen.getByRole('combobox', { name: /coverage/i });\n    await userEvent.click(coverageSelect);\n    const coverageListbox = await screen.findByRole('listbox');\n    await userEvent.click(getByRoleInElement(coverageListbox, 'option', { name: '$ 20,000' }));\n    await userEvent.click(screen.getByRole('button', { name: /NEXT/i }));\n};\n\ndescribe('HomePageClient - Form Step 1', () => {\n    \n  beforeEach(async () => {\n    // Reset mocks before each test\n    const logTrafficFlow = await import('@/ai/flows/log-traffic-flow');\n    logTrafficWithLocation = vi.fn().mockResolvedValue({ success: true });\n    logTrafficFlow.logTrafficWithLocation = logTrafficWithLocation;\n\n    const submitLeadFlow = await import('@/ai/flows/submit-lead-flow');\n    submitLead = vi.fn().mockResolvedValue({ success: true });\n    submitLeadFlow.submitLead = submitLead;\n\n    const submitAppLeadFlow = await import('@/ai/flows/submit-application-lead-flow');\n    submitApplicationLead = vi.fn().mockResolvedValue({ success: true });\n    submitAppLeadFlow.submitApplicationLead = submitApplicationLead;\n\n    const submitSlackFlow = await import('@/ai/flows/submit-slack');\n    submitToSlack = vi.fn().mockResolvedValue({ success: true });\n    submitSlackFlow.submitToSlack = submitToSlack;\n  });\n\n  it('should display validation errors for empty required fields on step 1', async () => {\n    render(<TestWrapper uuid=\"test-uuid\" />);\n\n    const nextButton = screen.getByRole('button', { name: /NEXT/i });\n    await userEvent.click(nextButton);\n\n    // Wait for error messages to appear. \n    // The error message is shown in the navigation component.\n    expect(await screen.findByText('First name is required.')).toBeInTheDocument();\n  });\n  \n  it('should display validation error for invalid age (too young)', async () => {\n    render(<TestWrapper uuid=\"test-uuid\" />);\n    \n    await userEvent.type(screen.getByPlaceholderText('First Name'), 'John');\n    await userEvent.type(screen.getByPlaceholderText('Last Name'), 'Doe');\n    await userEvent.type(screen.getByPlaceholderText('Valid Phone Number'), '1234567890');\n    await userEvent.type(screen.getByPlaceholderText('Email'), 'john.doe@example.com');\n    await userEvent.type(screen.getByPlaceholderText('Birthdate'), '01/01/2000'); // Too young\n    \n    const genderSelect = screen.getByRole('combobox');\n    await userEvent.click(genderSelect);\n    const listbox = await screen.findByRole('listbox');\n    await userEvent.click(getByRoleInElement(listbox, 'option', { name: 'Male' }));\n    \n    const nextButton = screen.getByRole('button', { name: /NEXT/i });\n    await userEvent.click(nextButton);\n\n    expect(await screen.findByText(/You must be between 45 and 80 years old/i)).toBeInTheDocument();\n  });\n\n  it('should proceed to the next step with valid data', async () => {\n    render(<TestWrapper uuid=\"test-uuid\" />);\n\n    // Check that we start on the right title\n    expect(screen.getByText(/State and Congress Approved/)).toBeInTheDocument();\n\n    await fillStepOne();\n    \n    // After clicking next, the first form should be gone and the second form should be visible.\n    // A simple way to check is to look for an element unique to the next step (AdditionalQuestionsForm).\n    await waitFor(() => {\n        expect(screen.getByText(/Is the policy owner different than the insured/i)).toBeInTheDocument();\n    });\n\n    // Check that an error from the previous step is no longer visible\n    expect(screen.queryByText(/You must be between 45 and 80 years old/i)).not.toBeInTheDocument();\n  });\n\n});\n\n\ndescribe('HomePageClient - Form Step 2', () => {\n  beforeEach(async () => {\n    // Reset mocks before each test\n    const logTrafficFlow = await import('@/ai/flows/log-traffic-flow');\n    logTrafficWithLocation = vi.fn().mockResolvedValue({ success: true });\n    logTrafficFlow.logTrafficWithLocation = logTrafficWithLocation;\n  });\n\n  it('should display validation errors for unanswered questions on step 2', async () => {\n    render(<TestWrapper uuid=\"test-uuid\" />);\n    await fillStepOne();\n    \n    await waitFor(() => {\n      expect(screen.getByText(/Is the policy owner different than the insured/i)).toBeInTheDocument();\n    });\n\n    const nextButton = screen.getByRole('button', { name: /NEXT/i });\n    await userEvent.click(nextButton);\n\n    expect(await screen.findByText('Please select an option.')).toBeInTheDocument();\n  });\n\n  it('should proceed to step 3 with valid answers', async () => {\n    render(<TestWrapper uuid=\"test-uuid\" />);\n    await fillStepTwo();\n\n    await waitFor(() => {\n        expect(screen.getByPlaceholderText(\"Applicant's Primary Address\")).toBeInTheDocument();\n    });\n\n    // Ensure no validation errors from step 2 are visible\n    expect(screen.queryByText('Please select an option.')).not.toBeInTheDocument();\n  });\n});\n\ndescribe('HomePageClient - Form Step 3', () => {\n  beforeEach(async () => {\n     // Reset mocks before each test\n     const logTrafficFlow = await import('@/ai/flows/log-traffic-flow');\n     logTrafficWithLocation = vi.fn().mockResolvedValue({ success: true });\n     logTrafficFlow.logTrafficWithLocation = logTrafficWithLocation;\n \n     const submitLeadFlow = await import('@/ai/flows/submit-lead-flow');\n     submitLead = vi.fn().mockResolvedValue({ success: true });\n     submitLeadFlow.submitLead = submitLead;\n\n     const submitSlackFlow = await import('@/ai/flows/submit-slack');\n     submitToSlack = vi.fn().mockResolvedValue({ success: true });\n     submitSlackFlow.submitToSlack = submitToSlack;\n  });\n\n  it('should display validation errors for empty required fields on step 3', async () => {\n    render(<TestWrapper uuid=\"test-uuid\" />);\n    await fillStepTwo();\n\n    await waitFor(() => {\n      expect(screen.getByPlaceholderText(\"Applicant's Primary Address\")).toBeInTheDocument();\n    });\n\n    const nextButton = screen.getByRole('button', { name: /NEXT/i });\n    await userEvent.click(nextButton);\n    \n    expect(await screen.findByText('Address is required.')).toBeInTheDocument();\n  });\n  \n  it('should proceed to step 4 with valid data and call submitLead', async () => {\n    render(<TestWrapper uuid=\"test-uuid\" />);\n    await fillStepThree();\n\n    await waitFor(() => {\n        expect(screen.getByPlaceholderText(\"Account Holder Name\")).toBeInTheDocument();\n    });\n\n    // Check that submitLead was called\n    expect(submitLead).toHaveBeenCalledTimes(1);\n    \n    // Ensure no validation errors from step 3 are visible\n    expect(screen.queryByText('Address is required.')).not.toBeInTheDocument();\n  });\n});\n\ndescribe('HomePageClient - Form Step 4', () => {\n    beforeEach(async () => {\n        // Reset mocks before each test\n        const logTrafficFlow = await import('@/ai/flows/log-traffic-flow');\n        logTrafficWithLocation = vi.fn().mockResolvedValue({ success: true });\n        logTrafficFlow.logTrafficWithLocation = logTrafficWithLocation;\n    \n        const submitLeadFlow = await import('@/ai/flows/submit-lead-flow');\n        submitLead = vi.fn().mockResolvedValue({ success: true });\n        submitLeadFlow.submitLead = submitLead;\n    \n        const submitAppLeadFlow = await import('@/ai/flows/submit-application-lead-flow');\n        submitApplicationLead = vi.fn().mockResolvedValue({ success: true });\n        submitAppLeadFlow.submitApplicationLead = submitApplicationLead;\n    \n        const submitSlackFlow = await import('@/ai/flows/submit-slack');\n        submitToSlack = vi.fn().mockResolvedValue({ success: true });\n        submitSlackFlow.submitToSlack = submitToSlack;\n    });\n\n    it('should display validation errors for empty fields on step 4', async () => {\n        render(<TestWrapper uuid=\"test-uuid\" />);\n        await fillStepThree();\n\n        await waitFor(() => {\n            expect(screen.getByPlaceholderText(\"Account Holder Name\")).toBeInTheDocument();\n        });\n\n        const submitButton = screen.getByRole('button', { name: /SUBMIT/i });\n        await userEvent.click(submitButton);\n\n        expect(await screen.findByText('Account holder name is required.')).toBeInTheDocument();\n    });\n\n    it('should proceed to step 5 on successful submission', async () => {\n        render(<TestWrapper uuid=\"test-uuid\" />);\n        await fillStepThree();\n\n        await waitFor(() => {\n            expect(screen.getByPlaceholderText(\"Account Holder Name\")).toBeInTheDocument();\n        });\n\n        // Fill in step 4 form\n        await userEvent.type(screen.getByPlaceholderText(\"Account Holder Name\"), \"Jane Doe\");\n        await userEvent.type(screen.getByPlaceholderText(\"Account Number\"), \"123456789\");\n        await userEvent.type(screen.getByPlaceholderText(\"Routing Number\"), \"987654321\");\n        await userEvent.type(screen.getByPlaceholderText(\"Last 4 Digits of SSN\"), \"1234\");\n        \n        const submitButton = screen.getByRole('button', { name: /SUBMIT/i });\n        await userEvent.click(submitButton);\n\n        await waitFor(() => {\n            expect(screen.getByText(/We have all of the information necessary/i)).toBeInTheDocument();\n            expect(screen.getByRole('heading', { name: /Self-Enroll/i })).toBeInTheDocument();\n        });\n\n        // Check that background submissions were called\n        expect(submitApplicationLead).toHaveBeenCalledTimes(1);\n        expect(submitToSlack).toHaveBeenCalledTimes(2); // Called on step 3 and 4\n    });\n});\n"
  }
}
