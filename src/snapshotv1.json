{
  "comment": "chubb-frontend-backupv4: A complete snapshot of all application frontend files. This can be used to restore the project to a known-good state.",
  "files": {
    "app/src/app/layout.tsx": "/**\n * @file src/app/layout.tsx\n * @description This is the root layout for the entire application. It sets up the basic HTML structure, including the `<html>` and `<body>` tags, applies global fonts and CSS, and includes the Toaster component for notifications.\n */\nimport type { Metadata } from 'next';\nimport { siteConfig } from '@/config/site';\nimport { Toaster } from \"@/components/ui/toaster\";\nimport './globals.css';\n\nexport const metadata: Metadata = {\n  title: {\n    default: siteConfig.name,\n    template: `%s | ${siteConfig.name}`,\n  },\n  description: siteConfig.description,\n};\n\nexport default function RootLayout({\n  children,\n}: Readonly<{\n  children: React.ReactNode;\n}>) {\n  return (\n    <html lang=\"en\" className=\"scroll-smooth\" suppressHydrationWarning>\n      <head>\n      </head>\n      <body className=\"font-body antialiased font-medium\" suppressHydrationWarning>\n        {children}\n        <Toaster />\n      </body>\n    </html>\n  );\n}\n",
    "app/src/app/page.tsx": "/**\n * @file src/app/page.tsx\n * @description The main entry point for the root URL ('/'). It immediately redirects the user to a unique URL to begin the application flow, ensuring each session is isolated.\n */\nimport HomeRedirect from '@/components/home-redirect';\nimport { Suspense } from 'react';\n\nexport default function Home() {\n  return (\n    <Suspense fallback={null}>\n      <HomeRedirect />\n    </Suspense>\n  );\n}\n",
    "app/src/app/[uuid]/page.tsx": "/**\n * @file src/app/[uuid]/page.tsx\n * @description This file defines the dynamic route for the main application. It captures a unique ID (UUID) from the URL and passes it to the `HomePageClient` component, which manages the entire multi-step form experience.\n */\nimport { Suspense } from 'react';\nimport HomePageClient from '@/components/home-page-client';\n\nexport default async function UuidPage({ params }: { params: { uuid: string } }) {\n  return (\n    <Suspense fallback={\n      <div className=\"relative flex flex-col min-h-screen bg-background text-foreground font-body items-center justify-center\">\n        <div className=\"relative w-24 h-24\">\n          <svg\n            className=\"animate-spin h-full w-full text-primary\"\n            xmlns=\"http://www.w3.org/2000/svg\"\n            fill=\"none\"\n            viewBox=\"0 0 100 100\"\n          >\n            <path\n              d=\"M 50,10 A 40,40 0 1 1 10,50\"\n              fill=\"none\"\n              stroke=\"currentColor\"\n              strokeWidth=\"10\"\n              strokeLinecap=\"round\"\n            />\n          </svg>\n        </div>\n      </div>\n    }>\n      <HomePageClient uuid={params.uuid} />\n    </Suspense>\n  );\n}\n",
    "app/src/app/admin/page.tsx": "/**\n * @file src/app/admin/page.tsx\n * @description This is the server component for the admin dashboard page. It fetches traffic data, calculates statistics (like monthly visits and completions), and renders the overall page layout including stat cards. It uses Suspense to stream the `TrafficClient` component.\n */\nimport { Suspense } from 'react';\nimport TrafficClient from './traffic-client';\nimport { Button } from '@/components/ui/button';\nimport Link from 'next/link';\nimport { ArrowLeft, CheckCircle, Users, PhoneForwarded } from 'lucide-react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { getTraffic, type TrafficData } from '@/ai/flows/log-traffic-flow';\nimport { STEP_IDS, getStepNumber } from '@/lib/steps';\nimport { isThisMonth, parseISO, subMonths, isSameMonth } from 'date-fns';\n\ninterface MonthlyStats {\n  selfEnrollCompletions: number;\n  agentHandoffs: number;\n  visitsThisMonth: number;\n  visitsLastMonth: number;\n}\n\nasync function getStats(trafficData: TrafficData[]): Promise<MonthlyStats> {\n    const now = new Date();\n    const lastMonth = subMonths(now, 1);\n\n    const selfEnrollCompletionStep = getStepNumber(STEP_IDS.SELF_ENROLL_COMPLETE);\n    const agentHandoffStep = getStepNumber(STEP_IDS.AGENT_HANDOFF);\n\n    const uniqueUuidsThisMonth = new Set<string>();\n    const uniqueUuidsLastMonth = new Set<string>();\n    const selfEnrolledThisMonthUuids = new Set<string>();\n    const agentHandoffThisMonthUuids = new Set<string>();\n\n    trafficData.forEach(item => {\n        const timestamp = parseISO(item.timestamp);\n        if (isThisMonth(timestamp)) {\n            uniqueUuidsThisMonth.add(item.uuid);\n            if (item.step === selfEnrollCompletionStep) {\n                selfEnrolledThisMonthUuids.add(item.uuid);\n            }\n            if (item.step === agentHandoffStep) {\n                agentHandoffThisMonthUuids.add(item.uuid);\n            }\n        }\n        if (isSameMonth(timestamp, lastMonth)) {\n            uniqueUuidsLastMonth.add(item.uuid);\n        }\n    });\n\n    return {\n      selfEnrollCompletions: selfEnrolledThisMonthUuids.size,\n      agentHandoffs: agentHandoffThisMonthUuids.size,\n      visitsThisMonth: uniqueUuidsThisMonth.size,\n      visitsLastMonth: uniqueUuidsLastMonth.size,\n    };\n}\n\n\nexport default async function AdminPage() {\n  const initialTrafficData = await getTraffic();\n  const stats = await getStats(initialTrafficData);\n  \n  const lastMonthChange = stats.visitsThisMonth - stats.visitsLastMonth;\n  const lastMonthChangePercentage = stats.visitsLastMonth > 0\n    ? ((lastMonthChange / stats.visitsLastMonth) * 100).toFixed(1)\n    : stats.visitsThisMonth > 0 ? '100.0' : '0.0';\n\n\n  return (\n    <div className=\"min-h-screen bg-background text-foreground p-4 sm:p-8\">\n      <div className=\"max-w-7xl mx-auto\">\n        <div className=\"flex flex-wrap justify-between items-center mb-8 gap-4\">\n          <h1 className=\"text-3xl font-bold\">Application Traffic</h1>\n          <Link href=\"/\" passHref>\n            <Button variant=\"outline\">\n              <ArrowLeft className=\"mr-2 h-4 w-4\" />\n              Back to App\n            </Button>\n          </Link>\n        </div>\n\n        <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-4 mb-8\">\n            <Card>\n                <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                    <CardTitle className=\"text-sm font-medium\">Total Visits This Month</CardTitle>\n                    <Users className=\"h-4 w-4 text-muted-foreground\" />\n                </CardHeader>\n                <CardContent>\n                    <div className=\"text-2xl font-bold\">{stats.visitsThisMonth}</div>\n                     <p className=\"text-xs text-muted-foreground\">\n                        {lastMonthChange >= 0 ? '+' : ''}{lastMonthChangePercentage}% from last month\n                    </p>\n                </CardContent>\n            </Card>\n            <Card>\n                <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                    <CardTitle className=\"text-sm font-medium\">Self-Enrolled This Month</CardTitle>\n                    <CheckCircle className=\"h-4 w-4 text-muted-foreground\" />\n                </CardHeader>\n                <CardContent>\n                    <div className=\"text-2xl font-bold\">{stats.selfEnrollCompletions}</div>\n                    <p className=\"text-xs text-muted-foreground\">\n                        Fully automated completions\n                    </p>\n                </CardContent>\n            </Card>\n            <Card>\n                <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                    <CardTitle className=\"text-sm font-medium\">Agent Handoffs This Month</CardTitle>\n                    <PhoneForwarded className=\"h-4 w-4 text-muted-foreground\" />\n                </CardHeader>\n                <CardContent>\n                    <div className=\"text-2xl font-bold\">{stats.agentHandoffs}</div>\n                    <p className=\"text-xs text-muted-foreground\">\n                        Applications needing agent follow-up\n                    </p>\n                </CardContent>\n            </Card>\n             <Card>\n                <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                    <CardTitle className=\"text-sm font-medium\">Total Visits Last Month</CardTitle>\n                    <Users className=\"h-4 w-4 text-muted-foreground\" />\n                </CardHeader>\n                <CardContent>\n                    <div className=\"text-2xl font-bold\">{stats.visitsLastMonth}</div>\n                     <p className=\"text-xs text-muted-foreground\">\n                        Total unique visitors last month\n                    </p>\n                </CardContent>\n            </Card>\n        </div>\n\n        <Suspense fallback={<p>Loading traffic data...</p>}>\n          <TrafficClient initialData={initialTrafficData} />\n        </Suspense>\n      </div>\n    </div>\n  );\n}\n",
    "app/src/app/admin/traffic-client.tsx": "/**\n * @file src/app/admin/traffic-client.tsx\n * @description This client component renders the main data table for the admin dashboard. It handles real-time polling for new traffic data, sorting, and dynamic styling for recent entries. It displays user progress through the application funnel.\n */\n'use client';\n\nimport { useState, useEffect, useMemo } from 'react';\nimport { getTraffic, type TrafficData } from '@/ai/flows/log-traffic-flow';\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Progress } from '@/components/ui/progress';\nimport { ArrowUpDown, MapPin } from 'lucide-react';\nimport { formatDistanceToNow, differenceInSeconds, parseISO } from 'date-fns';\nimport { cn } from '@/lib/utils';\nimport { STEP_IDS, stepDescriptions, getTotalSteps, ALL_STEPS, getStepNumber } from '@/lib/steps';\n\ntype SortKey = keyof TrafficData;\n\nconst TOTAL_STEPS = getTotalSteps();\nconst SELF_ENROLL_COMPLETE_STEP = getStepNumber(STEP_IDS.SELF_ENROLL_COMPLETE);\nconst AGENT_HANDOFF_STEP = getStepNumber(STEP_IDS.AGENT_HANDOFF);\nconst PAYMENT_STEP = getStepNumber(STEP_IDS.PAYMENT);\nconst SELF_ENROLL_LOADING_STEP = getStepNumber(STEP_IDS.SELF_ENROLL_LOADING);\n\n\nexport default function TrafficClient({ initialData }: { initialData: TrafficData[] }) {\n  const [trafficData, setTrafficData] = useState<TrafficData[]>(initialData);\n  const [isLoading, setIsLoading] = useState(false);\n  const [sortConfig, setSortConfig] = useState<{ key: SortKey; direction: 'ascending' | 'descending' } | null>({ key: 'timestamp', direction: 'descending'});\n\n  const stepIdMap = useMemo(() => {\n    const map: { [key: number]: string } = {};\n    ALL_STEPS.forEach((id) => {\n        const stepNum = getStepNumber(id);\n        map[stepNum] = stepDescriptions[id] || `Unknown Step ${stepNum}`;\n    });\n    return map;\n  }, []);\n\n  useEffect(() => {\n    const interval = setInterval(async () => {\n      setIsLoading(true);\n      try {\n        const newData = await getTraffic();\n        setTrafficData(newData);\n      } catch (error) {\n        console.error(\"Failed to fetch traffic data:\", error);\n      } finally {\n        setIsLoading(false);\n      }\n    }, 5000); // Poll every 5 seconds\n\n    return () => clearInterval(interval);\n  }, []);\n\n  const sortedData = useMemo(() => {\n    let sortableItems = [...trafficData];\n    if (sortConfig !== null) {\n      sortableItems.sort((a, b) => {\n        const valA = a[sortConfig.key];\n        const valB = b[sortConfig.key];\n        \n        if (valA === undefined || valA === null) return 1;\n        if (valB === undefined || valB === null) return -1;\n\n        if (valA < valB) {\n          return sortConfig.direction === 'ascending' ? -1 : 1;\n        }\n        if (valA > valB) {\n          return sortConfig.direction === 'ascending' ? 1 : -1;\n        }\n        return 0;\n      });\n    }\n    return sortableItems;\n  }, [trafficData, sortConfig]);\n\n  const requestSort = (key: SortKey) => {\n    let direction: 'ascending' | 'descending' = 'ascending';\n    if (sortConfig && sortConfig.key === key && sortConfig.direction === 'ascending') {\n      direction = 'descending';\n    }\n    setSortConfig({ key, direction });\n  };\n\n  const getSortIcon = (key: SortKey) => {\n    if (!sortConfig || sortConfig.key !== key) {\n        return <ArrowUpDown className=\"ml-2 h-4 w-4\" />;\n    }\n    return sortConfig.direction === 'ascending' ? '▲' : '▼';\n  };\n  \n  const getProgressColor = (step: number): string => {\n    if (step >= SELF_ENROLL_COMPLETE_STEP) return 'bg-green-500';\n    if (step >= SELF_ENROLL_LOADING_STEP) return 'bg-lime-500';\n    if (step > PAYMENT_STEP) return 'bg-amber-500';\n    return 'bg-red-500';\n  };\n\n\n  if (isLoading && trafficData.length === 0) {\n    return <p>Loading traffic data...</p>;\n  }\n\n  return (\n    <div className=\"bg-card p-4 rounded-lg shadow-lg\">\n      <Table>\n        <TableHeader>\n          <TableRow>\n            <TableHead>\n              <Button variant=\"ghost\" onClick={() => requestSort('uuid')}>\n                User\n                {getSortIcon('uuid')}\n              </Button>\n            </TableHead>\n            <TableHead>\n              <Button variant=\"ghost\" onClick={() => requestSort('step')}>\n                Progress\n                {getSortIcon('step')}\n              </Button>\n            </TableHead>\n            <TableHead>\n               <Button variant=\"ghost\" onClick={() => requestSort('timestamp')}>\n                Last Activity\n                {getSortIcon('timestamp')}\n              </Button>\n            </TableHead>\n            <TableHead>\n                Location\n            </TableHead>\n          </TableRow>\n        </TableHeader>\n        <TableBody>\n          {sortedData.map((item) => {\n            const isRecent = differenceInSeconds(new Date(), parseISO(item.timestamp)) < 10;\n            return (\n            <TableRow key={item.uuid} className={cn(isRecent && \"bg-green-500/10\")}>\n              <TableCell className=\"font-mono text-xs p-2\">\n                 <div className=\"flex items-center gap-3\">\n                    {isRecent && (\n                        <Badge variant=\"success\" className=\"bg-green-600 text-white animate-pulse\">Now</Badge>\n                    )}\n                    <span className=\"truncate\">{item.uuid}</span>\n                </div>\n              </TableCell>\n              <TableCell className=\"p-2\">\n                <div className=\"flex items-center gap-4\">\n                  <div className=\"flex flex-col w-64\">\n                    <div className=\"font-medium truncate text-sm\">{stepIdMap[item.step] || `Unknown Step ${item.step}`}</div>\n                     <div className=\"text-muted-foreground text-xs\">Step {item.step} of {TOTAL_STEPS}</div>\n                    <Progress \n                        value={(item.step / TOTAL_STEPS) * 100} \n                        className=\"h-2 mt-1\" \n                        indicatorClassName={getProgressColor(item.step)} \n                    />\n                  </div>\n                  <div className=\"ml-auto\">\n                    {item.step === SELF_ENROLL_COMPLETE_STEP && (\n                      <Badge variant=\"success\">\n                        SELF-ENROLLED\n                      </Badge>\n                    )}\n                    {item.step === AGENT_HANDOFF_STEP && (\n                      <Badge variant=\"secondary\">\n                        AGENT HANDOFF\n                      </Badge>\n                    )}\n                  </div>\n                </div>\n              </TableCell>\n              <TableCell className=\"p-2 text-xs\">{formatDistanceToNow(new Date(item.timestamp), { addSuffix: true })}</TableCell>\n              <TableCell className=\"p-2 text-xs\">\n                {item.city || item.country ? (\n                    <div className=\"flex items-center gap-2\">\n                        <MapPin className=\"h-4 w-4 text-muted-foreground\" />\n                        <span>{item.city}{item.city && item.country && \", \"}{item.country}</span>\n                    </div>\n                ) : (\n                    <span className=\"text-muted-foreground\">Unknown</span>\n                )}\n              </TableCell>\n            </TableRow>\n          )})}\n        </TableBody>\n      </Table>\n    </div>\n  );\n}\n",
    "app/src/app/globals.css": "/**\n * @file src/app/globals.css\n * @description This file defines the global styles and theme for the application using Tailwind CSS. It sets up CSS variables for light and dark modes, including colors, fonts, and other base styles.\n */\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n@layer base {\n  @font-face {\n    font-family: 'StyreneAWeb';\n    src: url('/fonts/StyreneAWeb-Medium.ttf') format('truetype');\n    font-weight: 500;\n    font-style: normal;\n    font-display: swap;\n  }\n\n  :root {\n    --background: 210 47% 97%; /* Very light Blue */\n    --foreground: 224 71% 4%;\n    --card: 0 0% 100%;\n    --card-foreground: 224 71% 4%;\n    --popover: 0 0% 100%;\n    --popover-foreground: 224 71% 4%;\n    --primary: 229 100% 65%; /* #4364FF */\n    --primary-foreground: 210 40% 98%;\n    --secondary: 210 40% 96.1%;\n    --secondary-foreground: 222.2 47.4% 11.2%;\n    --muted: 210 40% 96.1%;\n    --muted-foreground: 215 25% 27%;\n    --accent: 14 100% 75%; /* #FF997F */\n    --accent-foreground: 222.2 47.4% 11.2%;\n    --destructive: 20 100% 50%;\n    --destructive-foreground: 0 0% 98%;\n    --success: 142 76% 36%;\n    --success-foreground: 0 0% 98%;\n    --border: 214.3 31.8% 91.4%;\n    --input: 214.3 31.8% 88%;\n    --ring: 229 100% 65%; /* #4364FF */\n    --radius: 0.5rem;\n    --chart-1: 12 76% 61%;\n    --chart-2: 173 58% 39%;\n    --chart-3: 197 37% 24%;\n    --chart-4: 43 74% 66%;\n    --chart-5: 27 87% 67%;\n    --sidebar-background: 210 47% 97%;\n    --sidebar-foreground: 224 71% 4%;\n    --sidebar-primary: 204 54% 77%;\n    --sidebar-primary-foreground: 222.2 47.4% 11.2%;\n    --sidebar-accent: 240 40% 94%;\n    --sidebar-accent-foreground: 222.2 47.4% 11.2%;\n    --sidebar-border: 214.3 31.8% 91.4%;\n    --sidebar-ring: 204 54% 77%;\n  }\n  .dark {\n    --background: 222.2 84% 4.9%;\n    --foreground: 210 40% 98%;\n    --card: 222.2 84% 4.9%;\n    --card-foreground: 210 40% 98%;\n    --popover: 222.2 84% 4.9%;\n    --popover-foreground: 210 40% 98%;\n    --primary: 229 100% 65%; /* #4364FF */\n    --primary-foreground: 210 40% 98%;\n    --secondary: 217.2 32.6% 17.5%;\n    --secondary-foreground: 210 40% 98%;\n    --muted: 217.2 32.6% 17.5%;\n    --muted-foreground: 215 20.2% 65.1%;\n    --accent: 14 100% 75%; /* #FF997F */\n    --accent-foreground: 210 40% 98%;\n    --destructive: 20 100% 55%;\n    --destructive-foreground: 0 0% 98%;\n    --success: 142 71% 45%;\n    --success-foreground: 0 0% 98%;\n    --border: 217.2 32.6% 17.5%;\n    --input: 217.2 32.6% 15%;\n    --ring: 229 100% 65%; /* #4364FF */\n    --chart-1: 220 70% 50%;\n    --chart-2: 160 60% 45%;\n    --chart-3: 30 80% 55%;\n    --chart-4: 280 65% 60%;\n    --chart-5: 340 75% 55%;\n    --sidebar-background: 222.2 84% 4.9%;\n    --sidebar-foreground: 210 40% 98%;\n    --sidebar-primary: 217.2 91.2% 59.8%;\n    --sidebar-primary-foreground: 210 40% 98%;\n    --sidebar-accent: 217.2 32.6% 17.5%;\n    --sidebar-accent-foreground: 210 40% 98%;\n    --sidebar-border: 217.2 32.6% 17.5%;\n    --sidebar-ring: 217.2 91.2% 59.8%;\n  }\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n  body {\n    @apply bg-background text-foreground;\n  }\n  input:-webkit-autofill,\n  input:-webkit-autofill:hover,\n  input:-webkit-autofill:focus,\n  input:-webkit-autofill:active {\n      -webkit-box-shadow: 0 0 0 30px hsl(var(--card)) inset !important;\n      -webkit-text-fill-color: hsl(var(--foreground)) !important;\n      transition: background-color 5000s ease-in-out 0s;\n  }\n}\n",
    "app/src/components/home-page-client.tsx": "/**\n * @file src/components/home-page-client.tsx\n * @description This is the main client component that orchestrates the entire multi-step form experience. It manages form state, step transitions, animations, data submission, and communication with backend services (including WebSockets for real-time updates). It dynamically renders the correct form step component based on the current state.\n */\n'use client';\n\nimport { useState, useEffect, useCallback } from 'react';\nimport { useSearchParams } from 'next/navigation';\nimport { useForm, FormProvider, FieldErrors, useWatch, useFormContext } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport Link from 'next/link';\n\nimport { \n  fullFormSchema, \n  insuranceFormSchema, \n  additionalQuestionsObjectSchema,\n  beneficiaryFormSchema, \n  basePaymentFormSchema,\n  paymentFormSchema,\n  type FormValues,\n} from '@/lib/schema';\nimport {\n    STEP_IDS,\n    FORM_STEPS,\n    getStepNumber,\n    type StepId,\n    ALL_STEPS\n} from '@/lib/steps';\n\nimport { submitApplication } from '@/ai/flows/submit-application-flow';\nimport { submitLead } from '@/ai/flows/submit-lead-flow';\nimport { submitApplicationLead } from '@/ai/flows/submit-application-lead-flow';\nimport { logTraffic } from '@/ai/flows/log-traffic-flow';\nimport { useToast } from '@/hooks/use-toast';\nimport { useSocket } from '@/hooks/use-socket';\n\nimport { Logo, Icon } from '@/components/logo';\nimport InsuranceForm from '@/components/insurance-form';\nimport AdditionalQuestionsForm from '@/components/additional-questions-form';\nimport BeneficiaryForm from '@/components/beneficiary-form';\nimport PaymentForm from '@/components/payment-form';\nimport SelfEnrollLoading from '@/components/self-enroll-loading';\nimport SelfEnrollContract from '@/components/self-enroll-contract';\nimport SelfEnrollComplete from '@/components/self-enroll-complete';\nimport AgentHandoffComplete from '@/components/agent-handoff-complete';\nimport { cn } from '@/lib/utils';\nimport { submitToSlack } from '@/ai/flows/submit-slack';\nimport DevStepper from '@/components/dev-stepper';\nimport PlacesProvider from './places-provider';\n\n\nconst stepFieldMapping: Record<StepId, (keyof FormValues)[]> = {\n  [STEP_IDS.USER_INFO]: Object.keys(insuranceFormSchema.shape) as (keyof FormValues)[],\n  [STEP_IDS.HEALTH_QUESTIONS]: Object.keys(additionalQuestionsObjectSchema.shape) as (keyof FormValues)[],\n  [STEP_IDS.BENEFICIARY]: Object.keys(beneficiaryFormSchema.shape) as (keyof FormValues)[],\n  [STEP_IDS.PAYMENT]: Object.keys(basePaymentFormSchema.shape) as (keyof FormValues)[],\n  // Non-form steps have no fields\n  [STEP_IDS.SELF_ENROLL_LOADING]: [],\n  [STEP_IDS.SELF_ENROLL_CONTRACT]: [],\n  [STEP_IDS.SELF_ENROLL_COMPLETE]: [],\n  [STEP_IDS.AGENT_HANDOFF]: [],\n};\n\n\nconst PaymentAutoSubmitter = ({ onValid }: { onValid: () => void }) => {\n  const { control } = useFormContext<FormValues>();\n  const formValues = useWatch({ control });\n  const paymentMethod = formValues.paymentMethod;\n\n  useEffect(() => {\n    const checkValidity = () => {\n      const result = paymentFormSchema.safeParse(formValues);\n      if (result.success) {\n        onValid();\n      }\n    };\n\n    if (paymentMethod) {\n       const timer = setTimeout(checkValidity, 500);\n       return () => clearTimeout(timer);\n    }\n  }, [formValues, paymentMethod, onValid]);\n\n  return null;\n};\n\nexport default function HomePageClient({ uuid }: { uuid: string }) {\n  const [step, setStep] = useState<StepId>(STEP_IDS.USER_INFO);\n  const [animationClass, setAnimationClass] = useState('animate-fade-in-up');\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [pin, setPin] = useState('');\n  const [phoneLastFour, setPhoneLastFour] = useState('');\n  const searchParams = useSearchParams();\n  const { toast } = useToast();\n\n  const form = useForm<FormValues>({\n    resolver: zodResolver(fullFormSchema),\n    mode: 'onTouched',\n    defaultValues: {\n      firstName: '',\n      lastName: '',\n      phone: '',\n      email: '',\n      dob: '',\n      gender: '',\n      differentOwner: 'no',\n      healthQuestion1: 'no',\n      healthQuestion2: 'no',\n      healthQuestion3: 'no',\n      tobaccoUse: 'no',\n      existingPolicies: 'no',\n      otherHealthIssues: 'no',\n      otherHealthIssuesDetails: '',\n      addressStreet: \"\",\n      addressApt: \"\",\n      addressCity: \"\",\n      addressState: \"\",\n      addressZip: \"\",\n      effectiveDate: \"\",\n      beneficiaryFirstName: \"\",\n      beneficiaryLastName: \"\",\n      beneficiaryPhone: \"\",\n      beneficiaryDob: \"\",\n      beneficiaryRelation: \"\",\n      faceAmount: \"\",\n      paymentMethod: undefined,\n      paymentAccountHolderName: \"\",\n      paymentAccountNumber: \"\",\n      paymentRoutingNumber: \"\",\n      cardholderName: '',\n      cardNumber: '',\n      cardExpiry: '',\n      cardCvc: '',\n      billingZip: '',\n    },\n  });\n\n  const { formState: { errors } } = form;\n\n  const changeStep = useCallback((newStep: StepId, fromDevStepper = false) => {\n    if (newStep === step) return;\n\n    if (!fromDevStepper) {\n        logTraffic({ uuid, step: getStepNumber(newStep) });\n    }\n    \n    setAnimationClass('animate-fade-out-down');\n    setTimeout(() => {\n      setStep(newStep);\n      setAnimationClass('animate-fade-in-up');\n    }, 300);\n  }, [step, uuid]);\n  \n  useEffect(() => {\n    logTraffic({ uuid, step: getStepNumber(STEP_IDS.USER_INFO) });\n  }, [uuid]);\n\n  useEffect(() => {\n    const stepParam = searchParams.get('step');\n    if (stepParam) {\n      const stepNumber = parseInt(stepParam, 10);\n      const stepKey = ALL_STEPS.find(key => getStepNumber(key) === stepNumber);\n      if (stepKey) {\n        setStep(stepKey);\n      }\n    }\n  }, [searchParams]);\n  \n  const handleNext = async () => {\n    const currentStepIndex = FORM_STEPS.indexOf(step);\n    if (currentStepIndex === -1) return;\n\n    const fields = stepFieldMapping[step];\n    const output = await form.trigger(fields as any, { shouldFocus: true });\n    \n    if (!output) return;\n    \n    if (step === STEP_IDS.BENEFICIARY) {\n      submitLead(form.getValues());\n      submitToSlack({\n        step: 'Form 3 Lead',\n        formData: {\n          referenceId: uuid,\n          ...form.getValues(),\n        }});\n    }\n\n    const nextStepId = FORM_STEPS[currentStepIndex + 1];\n    if(nextStepId) {\n        changeStep(nextStepId);\n    }\n  };\n  \n  const processForm = async (data: FormValues) => {\n    if (isSubmitting) return;\n    setIsSubmitting(true);\n\n    submitApplicationLead(data);\n    submitToSlack({\n      step: 'Form 4 Application Lead',\n      formData: {\n        referenceId: uuid,\n        ...data\n      }});\n\n    const state = data.addressState;\n    if (state === 'CA') {\n      submitToSlack({\n        step: 'Agent Handoff (Auto - Restricted State)',\n        formData: {\n          referenceId: uuid,\n          ...form.getValues(),\n        }});\n      changeStep(STEP_IDS.AGENT_HANDOFF);\n    } else {\n      handleSelfEnrollSubmit(data);\n    }\n  };\n  \n  const handleSelfEnrollSubmit = async (data: FormValues) => {\n    try {\n      submitToSlack({\n        step: 'Self-Enrollment',\n        formData: {\n          ...data,\n          referenceId: uuid,\n        }});\n      const result = await submitApplication({ ...data, referenceId: uuid });\n\n      if (result.success) {\n        changeStep(STEP_IDS.SELF_ENROLL_LOADING);\n      } else {\n        toast({\n          variant: \"destructive\",\n          title: \"Submission Failed\",\n          description: result.message,\n        });\n        setIsSubmitting(false);\n      }\n    } catch (error) {\n      toast({\n        variant: \"destructive\",\n        title: \"An unexpected error occurred.\",\n        description: \"Please try again later.\",\n      });\n      setIsSubmitting(false);\n    } \n  };\n\n  const handleSelfEnrollError = (formErrors: FieldErrors<FormValues>) => {\n    toast({\n      variant: \"destructive\",\n      title: \"Incomplete Application\",\n      description: \"Please complete all required fields before submitting.\",\n    });\n    \n    const firstErrorField = Object.keys(formErrors)[0] as keyof FormValues;\n    const stepWithError = FORM_STEPS.find(stepId => stepFieldMapping[stepId].includes(firstErrorField));\n    \n    if (stepWithError) {\n      changeStep(stepWithError);\n    }\n  };\n  \n  const handleSocketUpdate = useCallback((data: any) => {\n    if (data.error) {\n       toast({\n          variant: \"destructive\",\n          title: data.error.title,\n          description: data.error.message,\n       });\n       return;\n    }\n\n    if (data.msg && typeof data.msg === 'string') {\n        try {\n            const payload = JSON.parse(data.msg);\n            const { currentStep, pin, phoneLastFour, isError, error } = payload;\n            \n            if (pin) setPin(pin);\n            if (phoneLastFour) setPhoneLastFour(phoneLastFour);\n\n            if (currentStep === 'sms-verification' || currentStep === 'CONTRACT_READY') {\n              changeStep(STEP_IDS.SELF_ENROLL_CONTRACT);\n            } else if (currentStep === 'ENROLLMENT_COMPLETE' || currentStep === 'processing' || currentStep === 'RESULT_SUCCESS') {\n              changeStep(STEP_IDS.SELF_ENROLL_COMPLETE);\n            } else if (currentStep === 'RESULT_FAILED' || (isError && error)) {\n                toast({\n                    variant: \"destructive\",\n                    title: \"Enrollment Failed\",\n                    description: error || \"An error occurred during enrollment.\",\n                });\n            }\n        } catch (e) {\n            console.error(\"Error parsing socket message\", e);\n            toast({\n                variant: \"destructive\",\n                title: \"Error\",\n                description: \"Received an invalid message from the server.\"\n            });\n        }\n    }\n  }, [changeStep, toast]);\n\n  const subscribeId = (step === STEP_IDS.SELF_ENROLL_LOADING) ? uuid : null;\n  useSocket(subscribeId, handleSocketUpdate);\n\n  const handleDevStepChange = (newStepId: StepId) => {\n    changeStep(newStepId, true);\n  };\n  \n  const getErrorMessage = () => {\n    if (!FORM_STEPS.includes(step)) return null;\n    \n    if (step === STEP_IDS.PAYMENT) {\n        const paymentMethod = form.getValues('paymentMethod');\n        if (!paymentMethod) return null;\n        const relevantFields = paymentMethod === 'bank' \n            ? ['paymentAccountHolderName', 'paymentAccountNumber', 'paymentRoutingNumber']\n            : ['cardholderName', 'cardNumber', 'cardExpiry', 'cardCvc', 'billingZip'];\n        \n        for (const field of relevantFields) {\n            if (errors[field as keyof FormValues]) {\n                return errors[field as keyof FormValues]?.message as string;\n            }\n        }\n        return null;\n    }\n\n    const currentStepFields = stepFieldMapping[step];\n    if (!currentStepFields) return null;\n\n    for (const field of currentStepFields) {\n      if (errors[field]) {\n        return errors[field]?.message as string;\n      }\n    }\n    \n    return null;\n  }\n  \n  const errorMessage = getErrorMessage();\n\n  const renderStep = () => {\n    switch (step) {\n      case STEP_IDS.USER_INFO:\n        return <InsuranceForm onNext={handleNext} errorMessage={errorMessage} disabled={isSubmitting} />;\n      case STEP_IDS.HEALTH_QUESTIONS:\n        return <AdditionalQuestionsForm onNext={handleNext} errorMessage={errorMessage} disabled={isSubmitting} />;\n      case STEP_IDS.BENEFICIARY:\n        return <BeneficiaryForm onNext={handleNext} errorMessage={errorMessage} disabled={isSubmitting} />;\n      case STEP_IDS.PAYMENT:\n        return <PaymentForm />;\n      case STEP_IDS.SELF_ENROLL_LOADING:\n        return <SelfEnrollLoading />;\n      case STEP_IDS.SELF_ENROLL_CONTRACT:\n        return <SelfEnrollContract pin={pin} phoneLastFour={phoneLastFour} />;\n      case STEP_IDS.SELF_ENROLL_COMPLETE:\n        return <SelfEnrollComplete />;\n      case STEP_IDS.AGENT_HANDOFF:\n        return <AgentHandoffComplete />;\n      default:\n        return <InsuranceForm onNext={handleNext} errorMessage={errorMessage} disabled={isSubmitting} />;\n    }\n  };\n\n  const getSubtitle = () => {\n    switch (step) {\n      case STEP_IDS.PAYMENT:\n        return \"You're at the last step! Your Final Expense policy will be active momentarily. Please choose either Bank Info or Card below.\";\n      case STEP_IDS.SELF_ENROLL_LOADING:\n        return 'Please have your phone ready. This page will advance automatically.';\n      case STEP_IDS.SELF_ENROLL_CONTRACT:\n        return 'A text with a link to sign has been sent. Please use the PIN below to access it.';\n      case STEP_IDS.SELF_ENROLL_COMPLETE:\n        return 'Your application is complete and your policy is now active. You will receive an email confirmation shortly.';\n      case STEP_IDS.AGENT_HANDOFF:\n        return \"Your application is complete and you're ready to go. You will receive a call from an agent within the next few days to finalize your policy!\";\n      default:\n        return 'Amounts between $5,000 - $25,000 / Available to anyone ages 45-80';\n    }\n  };\n  const subtitle = getSubtitle();\n  const isFormStep = FORM_STEPS.includes(step);\n\n  return (\n    <div className=\"relative flex flex-col min-h-screen bg-background text-foreground font-body\">\n      <header className=\"absolute top-0 left-0 p-8 md:p-12 hidden md:block\">\n        <Logo />\n      </header>\n      \n      <DevStepper currentStep={step} onStepChange={handleDevStepChange} />\n\n      <main className=\"flex-1 flex flex-col items-center justify-start pt-16 sm:pt-24 w-full px-8 sm:px-12 text-center\">\n        <div className=\"max-w-4xl w-full flex flex-col items-center\">\n            <div className=\"flex flex-col items-center\">\n              <Icon className=\"h-20 w-20 md:h-36 md:w-36 text-accent mb-2 md:mb-8\" />\n              <h1 className=\"font-headline text-3xl md:text-5xl tracking-tight mb-8 leading-tight max-w-2xl\">\n                  State and Congress Approved Final Expense Benefits Emergency Funds\n              </h1>\n              {subtitle && (\n                <p className=\"text-base text-foreground/80 mb-8 max-w-[55rem]\">\n                  {subtitle}\n                </p>\n              )}\n            </div>\n\n            <div className=\"w-full flex justify-center\">\n              <PlacesProvider>\n                <FormProvider {...form}>\n                  <form onSubmit={form.handleSubmit(processForm, handleSelfEnrollError)} className={cn(\"w-full flex flex-col items-center\", animationClass)}>\n                    {step === STEP_IDS.PAYMENT && <PaymentAutoSubmitter onValid={() => form.handleSubmit(processForm, handleSelfEnrollError)()} />}\n                    {renderStep()}\n                  </form>\n                </FormProvider>\n              </PlacesProvider>\n            </div>\n        </div>\n      </main>\n      {isFormStep && (\n        <footer className=\"w-full py-8 text-center\">\n          <p className=\"text-xs text-foreground/60\">\n            All information provided is private{\" \"}\n            <Link href=\"/admin\" className=\"cursor-pointer\">and</Link>\n            {\" \"}securely protected.\n          </p>\n        </footer>\n      )}\n    </div>\n  );\n}\n",
    "app/src/components/insurance-form.tsx": "/**\n * @file src/components/insurance-form.tsx\n * @description This component renders the first step of the application form, collecting the applicant's personal information (name, phone, email, DOB, gender). It includes input formatting and validation.\n */\n'use client';\n\nimport type { InsuranceFormValues } from '@/lib/schema';\nimport { useFormContext } from 'react-hook-form';\nimport { Input } from '@/components/ui/input';\nimport { FormField, FormItem, FormControl } from '@/components/ui/form';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { cn, formatPhoneNumber, formatDateInput } from '@/lib/utils';\nimport FormNavigation from './form-navigation';\n\ninterface InsuranceFormProps {\n    onNext: () => void;\n    errorMessage?: string | null;\n    disabled?: boolean;\n}\n\nexport default function InsuranceForm({ onNext, errorMessage, disabled }: InsuranceFormProps) {\n  const { control, formState: { errors } } = useFormContext<InsuranceFormValues>();\n\n  const handlePhoneChange = (e: React.ChangeEvent<HTMLInputElement>, field: any) => {\n    field.onChange(formatPhoneNumber(e.target.value));\n  };\n  \n  const handleDateChange = (e: React.ChangeEvent<HTMLInputElement>, field: any) => {\n    field.onChange(formatDateInput(e.target.value));\n  };\n\n  return (\n    <div className=\"w-full max-w-2xl space-y-4\">\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n          <FormField\n            control={control}\n            name=\"firstName\"\n            render={({ field }) => (\n              <FormItem>\n                <FormControl>\n                  <Input \n                    placeholder=\"First Name\" \n                    autoComplete=\"given-name\"\n                    {...field} \n                    className={cn(\"h-auto py-4 bg-card shadow-xl focus-visible:border-primary focus-visible:ring-0 focus-visible:ring-offset-0\", errors.firstName && \"border-destructive focus-visible:border-destructive animate-shake\")} \n                  />\n                </FormControl>\n              </FormItem>\n            )}\n          />\n          <FormField\n            control={control}\n            name=\"lastName\"\n            render={({ field }) => (\n              <FormItem>\n                <FormControl>\n                  <Input \n                    placeholder=\"Last Name\" \n                    autoComplete=\"family-name\"\n                    {...field} \n                    className={cn(\"h-auto py-4 bg-card shadow-xl focus-visible:border-primary focus-visible:ring-0 focus-visible:ring-offset-0\", errors.lastName && \"border-destructive focus-visible:border-destructive animate-shake\")} \n                  />\n                </FormControl>\n              </FormItem>\n            )}\n          />\n        </div>\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n           <FormField\n            control={control}\n            name=\"phone\"\n            render={({ field }) => (\n              <FormItem>\n                <FormControl>\n                  <Input \n                    placeholder=\"Valid Phone Number\" \n                    autoComplete=\"tel\"\n                    {...field} \n                    onChange={(e) => handlePhoneChange(e, field)} \n                    className={cn(\"h-auto py-4 bg-card shadow-xl focus-visible:border-primary focus-visible:ring-0 focus-visible:ring-offset-0\", errors.phone && \"border-destructive focus-visible:border-destructive animate-shake\")} \n                  />\n                </FormControl>\n              </FormItem>\n            )}\n          />\n          <FormField\n            control={control}\n            name=\"email\"\n            render={({ field }) => (\n              <FormItem>\n                <FormControl>\n                  <Input \n                    id=\"email\"\n                    placeholder=\"Email\" \n                    type=\"email\" \n                    autoComplete=\"email\"\n                    {...field} \n                    className={cn(\"h-auto py-4 bg-card shadow-xl focus-visible:border-primary focus-visible:ring-0 focus-visible:ring-offset-0\", errors.email && \"border-destructive focus-visible:border-destructive animate-shake\")} \n                  />\n                </FormControl>\n              </FormItem>\n            )}\n          />\n        </div>\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 items-end\">\n          <FormField\n            control={control}\n            name=\"dob\"\n            render={({ field }) => (\n              <FormItem>\n                <FormControl>\n                  <Input\n                    type=\"text\"\n                    placeholder=\"Birthdate\"\n                    autoComplete=\"bday\"\n                    {...field}\n                    onChange={(e) => handleDateChange(e, field)}\n                    className={cn(\"h-auto py-4 bg-card shadow-xl focus-visible:border-primary focus-visible:ring-0 focus-visible:ring-offset-0\", errors.dob && \"border-destructive focus-visible:border-destructive animate-shake\")} \n                  />\n                </FormControl>\n              </FormItem>\n            )}\n          />\n          <FormField\n            control={control}\n            name=\"gender\"\n            render={({ field }) => (\n              <FormItem>\n                <Select onValueChange={field.onChange} value={field.value}>\n                  <FormControl>\n                    <SelectTrigger className={cn(\n                      \"h-auto py-4 bg-card shadow-xl text-base focus-visible:border-primary focus-visible:ring-0 focus-visible:ring-offset-0\",\n                      !field.value && \"text-muted-foreground\",\n                      errors.gender && \"border-destructive focus-visible:border-destructive animate-shake\"\n                    )}>\n                      <SelectValue placeholder=\"Gender\" />\n                    </SelectTrigger>\n                  </FormControl>\n                  <SelectContent>\n                    <SelectItem value=\"male\">Male</SelectItem>\n                    <SelectItem value=\"female\">Female</SelectItem>\n                  </SelectContent>\n                </Select>\n              </FormItem>\n            )}\n          />\n        </div>\n        <FormNavigation\n            onNext={onNext}\n            isSubmit={false}\n            actionLabel={\"NEXT\"}\n            disabled={disabled}\n            errorMessage={errorMessage}\n        />\n    </div>\n  );\n}\n",
    "app/src/components/additional-questions-form.tsx": "/**\n * @file src/components/additional-questions-form.tsx\n * @description This component renders the second step of the form, which contains a series of yes/no health and policy questions. It conditionally shows a text area for more details if the user answers 'yes' to having other health issues.\n */\n'use client';\n\nimport type { AdditionalQuestionsFormValues } from '@/lib/schema';\nimport { useFormContext } from 'react-hook-form';\nimport { FormControl, FormField, FormItem, FormLabel } from '@/components/ui/form';\nimport { Button } from '@/components/ui/button';\nimport { Textarea } from '@/components/ui/textarea';\nimport { cn } from '@/lib/utils';\nimport { Check } from 'lucide-react';\nimport FormNavigation from './form-navigation';\n\ninterface AdditionalQuestionsFormProps {\n    onNext: () => void;\n    errorMessage?: string | null;\n    disabled?: boolean;\n}\n\nexport default function AdditionalQuestionsForm({ onNext, errorMessage, disabled }: AdditionalQuestionsFormProps) {\n  const { control, watch, formState: { errors } } = useFormContext<AdditionalQuestionsFormValues>();\n  const otherHealthIssuesValue = watch('otherHealthIssues');\n\n  const questions = [\n    { name: 'differentOwner', label: 'Is the policy owner different than the insured?' },\n    { name: 'healthQuestion1', label: 'Have you ever been diagnosed or treated for HIV, AIDS, bipolar, schizophrenia, dementia, or any progressive neurological disorder?' },\n    { name: 'healthQuestion2', label: 'Have you ever used oxygen or dialysis for any condition?' },\n    { name: 'healthQuestion3', label: 'In the last 5 years, have you had cancer (non-skin), stroke, heart attack, insulin-treated diabetes, COPD, hepatitis, cirrhosis, drug/alcohol abuse, PAH, hereditary angioedema, or pending tests for any of these?' },\n    { name: 'tobaccoUse', label: 'Have you used any nicotine products in the past 12 months?' },\n    { name: 'existingPolicies', label: 'Do you have any existing life or annuity policies with this or another company?' },\n  ] as const;\n\n  return (\n    <div className=\"w-full max-w-2xl space-y-6\">\n      {questions.map((q) => (\n        <FormField\n          key={q.name}\n          control={control}\n          name={q.name}\n          render={({ field }) => (\n            <FormItem className={cn(\"space-y-4 p-6 bg-card/50 rounded-lg shadow-lg text-left border-2 border-transparent\", errors[q.name] && \"border-destructive animate-shake\")}>\n              <FormLabel className=\"text-base font-semibold text-foreground text-center block\">{q.label}</FormLabel>\n              <FormControl>\n                <div className=\"flex justify-center items-center gap-4\">\n                  <Button\n                    type=\"button\"\n                    variant={field.value === 'yes' ? 'default' : 'outline'}\n                    className=\"w-32\"\n                    onClick={() => field.onChange('yes')}\n                  >\n                    Yes\n                    {field.value === 'yes' && <Check />}\n                  </Button>\n                  <Button\n                    type=\"button\"\n                    variant={field.value === 'no' ? 'default' : 'outline'}\n                    className=\"w-32\"\n                    onClick={() => field.onChange('no')}\n                  >\n                    No\n                    {field.value === 'no' && <Check />}\n                  </Button>\n                </div>\n              </FormControl>\n            </FormItem>\n          )}\n        />\n      ))}\n\n      <FormField\n        control={control}\n        name=\"otherHealthIssues\"\n        render={({ field }) => (\n          <FormItem className={cn(\"space-y-4 p-6 bg-card/50 rounded-lg shadow-lg text-left border-2 border-transparent\", (errors.otherHealthIssues || errors.otherHealthIssuesDetails) && \"border-destructive animate-shake\")}>\n            <FormLabel className=\"text-base font-semibold text-foreground text-center block\">Do you have any other health issues?</FormLabel>\n            <FormControl>\n              <div className=\"flex justify-center items-center gap-4\">\n                <Button\n                  type=\"button\"\n                  variant={field.value === 'yes' ? 'default' : 'outline'}\n                  className=\"w-32\"\n                  onClick={() => field.onChange('yes')}\n                >\n                  Yes\n                  {field.value === 'yes' && <Check />}\n                </Button>\n                <Button\n                  type=\"button\"\n                  variant={field.value === 'no' ? 'default' : 'outline'}\n                  className=\"w-32\"\n                  onClick={() => field.onChange('no')}\n                >\n                  No\n                  {field.value === 'no' && <Check />}\n                </Button>\n              </div>\n            </FormControl>\n            \n            {otherHealthIssuesValue === 'yes' && (\n              <FormField\n                control={control}\n                name=\"otherHealthIssuesDetails\"\n                render={({ field }) => (\n                  <FormItem className=\"animate-fade-in-up\">\n                    <FormControl>\n                      <Textarea\n                        placeholder=\"Please provide details about your other health issues...\"\n                        {...field}\n                        className={cn(\"h-auto py-4 bg-card shadow-xl focus-visible:border-primary focus-visible:ring-0 focus-visible:ring-offset-0\", errors.otherHealthIssuesDetails && \"border-destructive focus-visible:border-destructive animate-shake\")}\n                      />\n                    </FormControl>\n                  </FormItem>\n                )}\n              />\n            )}\n          </FormItem>\n        )}\n      />\n      <FormNavigation\n        onNext={onNext}\n        isSubmit={false}\n        actionLabel={\"NEXT\"}\n        disabled={disabled}\n        errorMessage={errorMessage}\n      />\n    </div>\n  );\n}\n",
    "app/src/components/beneficiary-form.tsx": "/**\n * @file src/components/beneficiary-form.tsx\n * @description This component renders the third step of the form. It collects the applicant's address (using the AddressAutocomplete component), beneficiary details, and desired policy information (coverage amount, start date).\n */\n'use client';\n\nimport { useState } from 'react';\nimport type { BeneficiaryFormValues } from '@/lib/schema';\nimport { useFormContext } from 'react-hook-form';\nimport { format } from \"date-fns\";\nimport {\n  FormControl,\n  FormField,\n  FormItem,\n} from '@/components/ui/form';\nimport { Input } from '@/components/ui/input';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Popover, PopoverContent, PopoverTrigger } from '@/components/ui/popover';\nimport { Button } from '@/components/ui/button';\nimport { Calendar } from '@/components/ui/calendar';\nimport { CalendarIcon } from 'lucide-react';\nimport { cn, formatPhoneNumber, formatDateInput } from '@/lib/utils';\nimport AddressAutocomplete from './address-autocomplete';\nimport FormNavigation from './form-navigation';\n\nconst coverageOptions = [\n  \"$ 10,000\", \"$ 12,000\", \"$ 14,000\", \"$ 16,000\", \"$ 18,000\", \"$ 20,000\", \"$ 25,000\"\n];\n\nconst relationshipOptions = [\n  \"Aunt\", \"Brother\", \"Child\", \"Civil Union/Partner\", \"Cousin\", \"Dependent\", \n  \"Father\", \"Friend\", \"Grandfather\", \"Grandmother\", \"Guardian\", \"Mother\", \n  \"Parent\", \"Self\", \"Sister\", \"Spouse\", \"Stepbrother\", \"Stepfather\", \n  \"Stepmother\", \"Stepsister\", \"Uncle\"\n];\n\ninterface BeneficiaryFormProps {\n    onNext: () => void;\n    errorMessage?: string | null;\n    disabled?: boolean;\n}\n\nexport default function BeneficiaryForm({ onNext, errorMessage, disabled }: BeneficiaryFormProps) {\n  const { control, formState: { errors } } = useFormContext<BeneficiaryFormValues>();\n  const [isCalendarOpen, setCalendarOpen] = useState(false);\n\n  const handleDateChange = (e: React.ChangeEvent<HTMLInputElement>, field: any) => {\n    field.onChange(formatDateInput(e.target.value));\n  };\n\n  const handlePhoneChange = (e: React.ChangeEvent<HTMLInputElement>, field: any) => {\n    field.onChange(formatPhoneNumber(e.target.value));\n  };\n\n  return (\n    <div className=\"w-full max-w-2xl space-y-6\">\n      \n      <div className=\"space-y-4\">\n        <AddressAutocomplete />\n         <FormField\n          control={control}\n          name=\"addressApt\"\n          render={({ field }) => (\n            <FormItem>\n              <FormControl>\n                <Input\n                  placeholder=\"(Appt or Mailbox, Optional)\"\n                  autoComplete=\"address-line2\"\n                  {...field}\n                  className={cn(\"h-auto py-4 bg-card shadow-xl focus-visible:border-primary focus-visible:ring-0 focus-visible:ring-offset-0\", errors.addressApt && \"border-destructive focus-visible:border-destructive animate-shake\")}\n                />\n              </FormControl>\n            </FormItem>\n          )}\n        />\n      </div>\n      \n      {/* Hidden fields for validation, populated by AddressAutocomplete */}\n      <FormField control={control} name=\"addressStreet\" render={({ field }) => <FormItem><FormControl><Input type=\"hidden\" {...field} /></FormControl></FormItem>} />\n      <FormField control={control} name=\"addressCity\" render={({ field }) => <FormItem><FormControl><Input type=\"hidden\" {...field} /></FormControl></FormItem>} />\n      <FormField control={control} name=\"addressState\" render={({ field }) => <FormItem><FormControl><Input type=\"hidden\" {...field} /></FormControl></FormItem>} />\n      <FormField control={control} name=\"addressZip\" render={({ field }) => <FormItem><FormControl><Input type=\"hidden\" {...field} /></FormControl></FormItem>} />\n\n\n       <div className=\"space-y-4 pt-4\">\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <FormField\n            control={control}\n            name=\"beneficiaryFirstName\"\n            render={({ field }) => (\n                <FormItem>\n                <FormControl className={cn(errors.beneficiaryFirstName && 'animate-shake')}>\n                    <Input placeholder=\"Beneficiary First Name\" autoComplete=\"off\" {...field} className={cn(\"h-auto py-4 bg-card shadow-xl focus-visible:border-primary focus-visible:ring-0 focus-visible:ring-offset-0\", errors.beneficiaryFirstName && \"border-destructive focus-visible:border-destructive animate-shake\")} />\n                </FormControl>\n                </FormItem>\n            )}\n            />\n            <FormField\n            control={control}\n            name=\"beneficiaryLastName\"\n            render={({ field }) => (\n                <FormItem>\n                <FormControl className={cn(errors.beneficiaryLastName && 'animate-shake')}>\n                    <Input placeholder=\"Beneficiary Last Name\" autoComplete=\"off\" {...field} className={cn(\"h-auto py-4 bg-card shadow-xl focus-visible:border-primary focus-visible:ring-0 focus-visible:ring-offset-0\", errors.beneficiaryLastName && \"border-destructive focus-visible:border-destructive animate-shake\")} />\n                </FormControl>\n                </FormItem>\n            )}\n            />\n        </div>\n        \n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <FormField\n            control={control}\n            name=\"beneficiaryPhone\"\n            render={({ field }) => (\n                <FormItem>\n                <FormControl className={cn(errors.beneficiaryPhone && 'animate-shake')}>\n                    <Input \n                        placeholder=\"Beneficiary Mobile (Optional)\" \n                        autoComplete=\"off\" \n                        {...field} \n                        onChange={(e) => handlePhoneChange(e, field)}\n                        className={cn(\"h-auto py-4 bg-card shadow-xl focus-visible:border-primary focus-visible:ring-0 focus-visible:ring-offset-0\", errors.beneficiaryPhone && \"border-destructive focus-visible:border-destructive animate-shake\")} />\n                </FormControl>\n                </FormItem>\n            )}\n            />\n            <FormField\n            control={control}\n            name=\"beneficiaryDob\"\n            render={({ field }) => (\n                <FormItem>\n                <FormControl className={cn(errors.beneficiaryDob && 'animate-shake')}>\n                    <Input \n                        placeholder=\"Beneficiary Birthdate (Optional)\" \n                        autoComplete=\"off\" \n                        {...field} \n                        onChange={(e) => handleDateChange(e, field)}\n                        className={cn(\"h-auto py-4 bg-card shadow-xl focus-visible:border-primary focus-visible:ring-0 focus-visible:ring-offset-0\", errors.beneficiaryDob && \"border-destructive focus-visible:border-destructive animate-shake\")} />\n                </FormControl>\n                </FormItem>\n            )}\n            />\n        </div>\n\n        <div className=\"grid grid-cols-1 gap-4\">\n            <FormField\n            control={control}\n            name=\"beneficiaryRelation\"\n            render={({ field }) => (\n                <FormItem>\n                <Select onValueChange={field.onChange} defaultValue={field.value} >\n                    <FormControl>\n                    <SelectTrigger className={cn(\"h-auto py-4 bg-card shadow-xl text-base focus-visible:border-primary focus-visible:ring-0 focus-visible:ring-offset-0\", errors.beneficiaryRelation && \"border-destructive focus-visible:border-destructive animate-shake\")}>\n                        <SelectValue placeholder=\"Relationship to Insured\" />\n                    </SelectTrigger>\n                    </FormControl>\n                    <SelectContent>\n                    {relationshipOptions.map(option => (\n                        <SelectItem key={option} value={option}>{option}</SelectItem>\n                    ))}\n                    </SelectContent>\n                </Select>\n                </FormItem>\n            )}\n            />\n        </div>\n      </div>\n\n      <div className=\"space-y-4 pt-8\">\n        <FormField\n          control={control}\n          name=\"faceAmount\"\n          render={({ field }) => (\n            <FormItem>\n              <Select onValueChange={field.onChange} defaultValue={field.value} >\n                <FormControl>\n                  <SelectTrigger className={cn(\"h-auto py-4 bg-card shadow-xl text-base focus-visible:border-primary focus-visible:ring-0 focus-visible:ring-offset-0\", errors.faceAmount && \"border-destructive focus-visible:border-destructive animate-shake\")}>\n                    <SelectValue placeholder=\"Select Coverage Amount\" />\n                  </SelectTrigger>\n                </FormControl>\n                <SelectContent>\n                  {coverageOptions.map(option => (\n                    <SelectItem key={option} value={option}>{option}</SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </FormItem>\n          )}\n        />\n        <FormField\n          control={control}\n          name=\"effectiveDate\"\n          render={({ field }) => (\n            <FormItem className=\"flex flex-col\">\n              <Popover open={isCalendarOpen} onOpenChange={setCalendarOpen}>\n                <PopoverTrigger asChild>\n                  <FormControl>\n                    <Button\n                      variant={\"outline\"}\n                      className={cn(\n                        \"h-auto py-4 bg-card shadow-xl focus-visible:border-primary focus-visible:ring-0 focus-visible:ring-offset-0 justify-start text-left font-normal text-base\",\n                        !field.value && \"text-muted-foreground\",\n                        errors.effectiveDate && \"border-destructive focus-visible:border-destructive animate-shake\"\n                      )}\n                    >\n                      <CalendarIcon className=\"mr-2 h-4 w-4\" />\n                      {field.value ? (\n                        format(field.value, \"MM/dd/yyyy\")\n                      ) : (\n                        <span>Policy Start Date (Default Today)</span>\n                      )}\n                    </Button>\n                  </FormControl>\n                </PopoverTrigger>\n                <PopoverContent className=\"w-auto p-0\" align=\"start\">\n                  <Calendar\n                    mode=\"single\"\n                    selected={field.value ? new Date(field.value) : undefined}\n                    onSelect={(date) => {\n                      field.onChange(date ? format(date, \"MM/dd/yyyy\") : \"\");\n                      setCalendarOpen(false);\n                    }}\n                    disabled={(date) => {\n                      const today = new Date();\n                      today.setHours(0, 0, 0, 0);\n                      return date < today;\n                    }}\n                    initialFocus\n                  />\n                </PopoverContent>\n              </Popover>\n            </FormItem>\n          )}\n        />\n      </div>\n      <FormNavigation\n            onNext={onNext}\n            isSubmit={false}\n            actionLabel={\"NEXT\"}\n            disabled={disabled}\n            errorMessage={errorMessage}\n        />\n    </div>\n  );\n}\n",
    "app/src/components/payment-form.tsx": "/**\n * @file src/components/payment-form.tsx\n * @description This component renders the fourth and final data collection step. It allows the user to choose between paying via Bank Account or Credit/Debit Card, and conditionally renders the appropriate form fields (`CardPaymentForm` or bank fields) based on their selection.\n */\n'use client';\n\nimport { useState } from 'react';\nimport type { PaymentFormValues } from '@/lib/schema';\nimport { useFormContext } from 'react-hook-form';\nimport { FormControl, FormField, FormItem } from '@/components/ui/form';\nimport { Input } from '@/components/ui/input';\nimport { cn } from '@/lib/utils';\nimport { Button } from '@/components/ui/button';\nimport { CreditCard, Landmark } from 'lucide-react';\nimport CardPaymentForm from './card-payment-form';\nimport { Separator } from './ui/separator';\n\nexport default function PaymentForm() {\n  const { control, formState: { errors }, setValue, trigger } = useFormContext<PaymentFormValues>();\n  const [paymentChoice, setPaymentChoice] = useState<'choice' | 'bank' | 'card'>('choice');\n\n  const selectPaymentMethod = (method: 'bank' | 'card') => {\n    setValue('paymentMethod', method, { shouldValidate: true, shouldDirty: true });\n    setPaymentChoice(method);\n    // Clear fields from the other method to prevent validation errors on invisible fields\n    if (method === 'bank') {\n        setValue('cardholderName', '');\n        setValue('cardNumber', '');\n        setValue('cardExpiry', '');\n        setValue('cardCvc', '');\n        setValue('billingZip', '');\n    } else {\n        setValue('paymentAccountHolderName', '');\n        setValue('paymentAccountNumber', '');\n        setValue('paymentRoutingNumber', '');\n    }\n    trigger(); // Re-run validation\n  }\n\n  if (paymentChoice === 'choice') {\n    return (\n        <div className=\"w-full max-w-4xl flex flex-col items-center text-center\">\n            <h2 className=\"text-base text-foreground/80 mb-8 max-w-[55rem]\">You're at the last step! Your Final Expense policy will be active momentarily. Please choose either Bank Info or Card below.</h2>\n            <div className=\"w-full flex flex-col md:flex-row justify-center items-stretch gap-8\">\n                {/* Bank Account Card */}\n                <div \n                    onClick={() => selectPaymentMethod('bank')}\n                    className=\"w-full md:w-1/2 p-8 bg-card text-card-foreground border-2 border-primary rounded-lg shadow-xl flex flex-col items-center transition-transform duration-300 ease-in-out hover:scale-105 hover:-translate-y-1 cursor-pointer\"\n                >\n                    <h2 className=\"font-headline text-3xl font-bold tracking-tight mb-4\">Bank Account</h2>\n                    <Separator className=\"bg-primary/50 my-2 w-full\" />\n                    <Landmark strokeWidth={2} className=\"w-12 h-12 my-4 text-primary\" />\n                </div>\n\n                {/* Credit/Debit Card */}\n                <div \n                    onClick={() => selectPaymentMethod('card')}\n                     className=\"w-full md:w-1/2 p-8 bg-primary text-primary-foreground rounded-lg shadow-xl flex flex-col items-center transition-transform duration-300 ease-in-out hover:scale-105 hover:-translate-y-1 cursor-pointer border-2 border-white\"\n                >\n                    <h2 className=\"font-headline text-3xl font-bold tracking-tight mb-4\">Credit/Debit Card</h2>\n                     <Separator className=\"bg-primary-foreground/50 my-2 w-full\" />\n                    <CreditCard strokeWidth={2} className=\"w-12 h-12 my-4 text-primary-foreground\" />\n                </div>\n            </div>\n        </div>\n    )\n  }\n\n  return (\n    <div className=\"w-full max-w-2xl text-center\">\n        {paymentChoice === 'bank' && (\n             <div className=\"space-y-4 animate-fade-in-up\">\n                <h3 className=\"text-xl font-semibold text-foreground mb-4\">Bank Account Details</h3>\n                <FormField\n                control={control}\n                name=\"paymentAccountHolderName\"\n                render={({ field }) => (\n                    <FormItem>\n                    <FormControl>\n                        <Input placeholder=\"Account Holder Name\" autoComplete=\"name\" {...field} className={cn(\"h-auto py-4 bg-card shadow-xl focus-visible:border-primary focus-visible:ring-0 focus-visible:ring-offset-0\", errors.paymentAccountHolderName && \"border-destructive focus-visible:border-destructive animate-shake\")} />\n                    </FormControl>\n                    </FormItem>\n                )}\n                />\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <FormField\n                    control={control}\n                    name=\"paymentAccountNumber\"\n                    render={({ field }) => (\n                    <FormItem>\n                        <FormControl>\n                        <Input placeholder=\"Account Number\" autoComplete=\"off\" {...field} className={cn(\"h-auto py-4 bg-card shadow-xl focus-visible:border-primary focus-visible:ring-0 focus-visible:ring-offset-0\", errors.paymentAccountNumber && \"border-destructive focus-visible:border-destructive animate-shake\")} />\n                        </FormControl>\n                    </FormItem>\n                    )}\n                />\n                <FormField\n                    control={control}\n                    name=\"paymentRoutingNumber\"\n                    render={({ field }) => (\n                    <FormItem>\n                        <FormControl>\n                        <Input placeholder=\"Routing Number\" autoComplete=\"off\" {...field} className={cn(\"h-auto py-4 bg-card shadow-xl focus-visible:border-primary focus-visible:ring-0 focus-visible:ring-offset-0\", errors.paymentRoutingNumber && \"border-destructive focus-visible:border-destructive animate-shake\")} />\n                        </FormControl>\n                    </FormItem>\n                    )}\n                />\n                </div>\n            </div>\n        )}\n\n        {paymentChoice === 'card' && (\n            <div className=\"animate-fade-in-up\">\n                 <h3 className=\"text-xl font-semibold text-foreground mb-4\">Card Details</h3>\n                 <CardPaymentForm />\n            </div>\n        )}\n    </div>\n  );\n}\n",
    "app/src/components/card-payment-form.tsx": "/**\n * @file src/components/card-payment-form.tsx\n * @description This sub-component renders the specific input fields required for credit/debit card payments. It includes client-side formatting for the card number, expiry date, CVC, and ZIP code.\n */\n'use client';\n\nimport { useFormContext } from 'react-hook-form';\nimport { FormControl, FormField, FormItem } from '@/components/ui/form';\nimport { Input } from '@/components/ui/input';\nimport { cn } from '@/lib/utils';\nimport type { PaymentFormValues } from '@/lib/schema';\n\nexport default function CardPaymentForm() {\n    const { control, formState: { errors } } = useFormContext<PaymentFormValues>();\n\n    const formatCardNumber = (value: string) => {\n        return value.replace(/[^\\d]/g, \"\").substring(0, 16);\n    };\n\n    const formatExpiry = (value: string) => {\n        const rawValue = value.replace(/\\D/g, '').slice(0, 4);\n        const month = rawValue.slice(0, 2);\n        const year = rawValue.slice(2, 4);\n      \n        if (rawValue.length > 2) {\n          return `${month}/${year}`;\n        }\n        return month;\n    };\n\n    const formatCvc = (value: string) => {\n        return value.replace(/[^\\d]/g, \"\").substring(0, 4);\n    };\n\n    const formatZip = (value: string) => {\n        return value.replace(/[^\\d]/g, \"\").substring(0, 5);\n    };\n\n\n    return (\n        <div className=\"space-y-4\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <FormField\n                    control={control}\n                    name=\"cardholderName\"\n                    render={({ field }) => (\n                        <FormItem>\n                        <FormControl>\n                            <Input placeholder=\"Cardholder Name\" autoComplete=\"cc-name\" {...field} className={cn(\"h-auto py-4 bg-card shadow-xl focus-visible:border-primary focus-visible:ring-0 focus-visible:ring-offset-0\", errors.cardholderName && \"border-destructive focus-visible:border-destructive animate-shake\")} />\n                        </FormControl>\n                        </FormItem>\n                    )}\n                />\n                <FormField\n                    control={control}\n                    name=\"cardNumber\"\n                    render={({ field }) => (\n                    <FormItem>\n                        <FormControl>\n                        <Input \n                            placeholder=\"Card Number\" \n                            autoComplete=\"cc-number\" \n                            {...field}\n                            onChange={(e) => field.onChange(formatCardNumber(e.target.value))}\n                            className={cn(\"h-auto py-4 bg-card shadow-xl focus-visible:border-primary focus-visible:ring-0 focus-visible:ring-offset-0\", errors.cardNumber && \"border-destructive focus-visible:border-destructive animate-shake\")} />\n                        </FormControl>\n                    </FormItem>\n                    )}\n                />\n            </div>\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                <FormField\n                    control={control}\n                    name=\"cardExpiry\"\n                    render={({ field }) => (\n                    <FormItem>\n                        <FormControl>\n                        <Input \n                            placeholder=\"MM/YY\" \n                            autoComplete=\"cc-exp\" \n                            {...field}\n                            onChange={(e) => field.onChange(formatExpiry(e.target.value))}\n                            className={cn(\"h-auto py-4 bg-card shadow-xl focus-visible:border-primary focus-visible:ring-0 focus-visible:ring-offset-0\", errors.cardExpiry && \"border-destructive focus-visible:border-destructive animate-shake\")} />\n                        </FormControl>\n                    </FormItem>\n                    )}\n                />\n                <FormField\n                    control={control}\n                    name=\"cardCvc\"\n                    render={({ field }) => (\n                    <FormItem>\n                        <FormControl>\n                        <Input \n                            placeholder=\"CVC\" \n                            autoComplete=\"cc-csc\" \n                            {...field} \n                            onChange={(e) => field.onChange(formatCvc(e.target.value))}\n                            className={cn(\"h-auto py-4 bg-card shadow-xl focus-visible:border-primary focus-visible:ring-0 focus-visible:ring-offset-0\", errors.cardCvc && \"border-destructive focus-visible:border-destructive animate-shake\")} />\n                        </FormControl>\n                    </FormItem>\n                    )}\n                />\n                 <FormField\n                    control={control}\n                    name=\"billingZip\"\n                    render={({ field }) => (\n                    <FormItem>\n                        <FormControl>\n                        <Input \n                            placeholder=\"Billing ZIP\" \n                            autoComplete=\"postal-code\" \n                            {...field} \n                            onChange={(e) => field.onChange(formatZip(e.target.value))}\n                            className={cn(\"h-auto py-4 bg-card shadow-xl focus-visible:border-primary focus-visible:ring-0 focus-visible:ring-offset-0\", errors.billingZip && \"border-destructive focus-visible:border-destructive animate-shake\")} />\n                        </FormControl>\n                    </FormItem>\n                    )}\n                />\n            </div>\n        </div>\n    );\n}\n",
    "app/src/components/self-enroll-loading.tsx": "/**\n * @file src/components/self-enroll-loading.tsx\n * @description This component displays a loading state after the user has submitted their application for self-enrollment. It shows a spinning icon and an informational message indicating that the process has started and the page will update automatically.\n */\n'use client';\n\nimport { Badge } from '@/components/ui/badge';\n\nexport default function SelfEnrollLoading() {\n  return (\n    <div className=\"w-full max-w-xl flex flex-col items-center text-center space-y-8 -mt-8\">\n      <Badge variant=\"secondary\" className=\"px-6 py-2 text-base font-semibold rounded-full bg-black text-white hover:bg-black/90\">\n        Self-Enrolling\n      </Badge>\n      <p className=\"text-base text-foreground/80 max-w-xl\">\n        We've started the process of completing your application!\n        Keep this page open. You will be advanced to the next step automatically.\n        Please have your phone ready.\n      </p>\n      <div className=\"relative w-24 h-24\">\n        <svg\n          className=\"animate-spin h-full w-full text-primary\"\n          xmlns=\"http://www.w3.org/2000/svg\"\n          fill=\"none\"\n          viewBox=\"0 0 100 100\"\n        >\n          <path\n            d=\"M 50,10 A 40,40 0 1 1 10,50\"\n            fill=\"none\"\n            stroke=\"currentColor\"\n            strokeWidth=\"10\"\n            strokeLinecap=\"round\"\n          />\n        </svg>\n      </div>\n    </div>\n  );\n}\n",
    "app/src/components/self-enroll-contract.tsx": "/**\n * @file src/components/self-enroll-contract.tsx\n * @description This component is shown when the self-enrollment process is waiting for the user to sign a contract sent via SMS. It displays a masked phone number and the access PIN the user needs to use.\n */\n'use client';\n\ninterface SelfEnrollContractProps {\n  pin?: string;\n  phoneLastFour?: string;\n}\n\nexport default function SelfEnrollContract({ pin, phoneLastFour }: SelfEnrollContractProps) {\n  const maskedPhoneNumber = `***-***-${phoneLastFour || 'XXXX'}`;\n\n  return (\n    <div className=\"w-full max-w-2xl flex flex-col items-center text-center\">\n      <h2 className=\"text-2xl font-bold tracking-tight mb-2\">Phone Verification</h2>\n      <p className=\"text-base text-foreground/80 max-w-lg mb-6\">\n        A text with a link to sign has been sent. Please use the PIN below to access it.\n      </p>\n\n      <div className=\"w-full flex gap-4 text-left mb-6\">\n        <div className=\"flex-1 bg-card rounded-lg p-4 border shadow-sm\">\n          <p className=\"text-sm text-muted-foreground\">Verification code sent to phone ending in:</p>\n          <p className=\"text-xl font-semibold tracking-wider text-foreground mt-1\">{maskedPhoneNumber}</p>\n        </div>\n        \n        <div className=\"flex-1 bg-primary/10 rounded-lg p-4 border border-primary/20\">\n          <p className=\"text-sm text-primary\">Access PIN:</p>\n          <p className=\"text-4xl font-bold tracking-widest text-primary mt-1\">{pin || '----'}</p>\n        </div>\n      </div>\n       <p className=\"text-sm text-foreground/60 max-w-lg\">\n        Waiting for confirmation... this page will advance automatically.\n      </p>\n    </div>\n  );\n}\n",
    "app/src/components/self-enroll-complete.tsx": "/**\n * @file src/components/self-enroll-complete.tsx\n * @description This component displays the final success message when the self-enrollment process is fully complete. It shows a confirmation checkmark and a congratulatory message.\n */\n'use client';\n\nimport { CheckCircle2 } from 'lucide-react';\n\nexport default function SelfEnrollComplete() {\n  return (\n    <div className=\"w-full max-w-xl flex flex-col items-center text-center space-y-8\">\n        <CheckCircle2 className=\"w-24 h-24 text-primary\" />\n        <h2 className=\"text-3xl font-bold tracking-tight\">Congratulations!</h2>\n        <p className=\"text-base text-foreground/80 max-w-md\">\n            Your application is complete and your policy is now active. You will receive an email confirmation shortly.\n        </p>\n    </div>\n  );\n}\n",
    "app/src/components/agent-handoff-complete.tsx": "/**\n * @file src/components/agent-handoff-complete.tsx\n * @description This component displays the completion screen for users who are handed off to an agent (e.g., due to being in a restricted state like California). It informs them that their application is complete and an agent will contact them.\n */\n'use client';\n\nimport { CheckCircle2 } from 'lucide-react';\n\nexport default function AgentHandoffComplete() {\n  return (\n    <div className=\"w-full max-w-xl flex flex-col items-center text-center space-y-8\">\n        <CheckCircle2 className=\"w-24 h-24 text-primary\" />\n        <h2 className=\"text-3xl font-bold tracking-tight\">Congratulations!</h2>\n        <p className=\"text-base text-foreground/80 max-w-md\">\n            Your application is complete and you're ready to go. You will receive a call from an agent within the next few days to help answer any questions and finalize your policy!\n        </p>\n    </div>\n  );\n}\n",
    "app/src/components/form-navigation.tsx": "/**\n * @file src/components/form-navigation.tsx\n * @description A reusable navigation component for the multi-step form. It handles the 'Next' button action and displays validation error messages in a consistent location above the button.\n */\n'use client';\n\nimport { useState, useEffect } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { ArrowRight, XCircle } from 'lucide-react';\nimport { cn } from '@/lib/utils';\n\ninterface FormNavigationProps {\n  onNext?: () => void;\n  isSubmit?: boolean;\n  actionLabel: string;\n  disabled?: boolean;\n  errorMessage?: string | null;\n}\n\nexport default function FormNavigation({\n  onNext,\n  isSubmit = false,\n  actionLabel,\n  disabled = false,\n  errorMessage = null,\n}: FormNavigationProps) {\n  const [currentError, setCurrentError] = useState<string | null>(errorMessage);\n  const [showError, setShowError] = useState(false);\n\n  useEffect(() => {\n    if (errorMessage) {\n      setCurrentError(errorMessage);\n      setShowError(true);\n      const timer = setTimeout(() => {\n        setShowError(false);\n      }, 5000); // Hide after 5 seconds\n      return () => clearTimeout(timer);\n    } else {\n      setShowError(false);\n    }\n  }, [errorMessage]);\n\n  const handleCloseError = () => {\n    setShowError(false);\n  };\n\n  return (\n    <div className=\"flex flex-col items-center mt-4 w-full gap-y-4\">\n      <div className=\"h-10 w-full max-w-xs md:max-w-sm\">\n        <div\n          className={cn(\n            \"transition-all duration-300 ease-in-out transform flex justify-center items-center h-full\",\n            showError ? \"opacity-100 translate-y-0\" : \"opacity-0 -translate-y-4\",\n            \"w-full\"\n          )}\n        >\n          {currentError && (\n            <div className=\"bg-destructive text-destructive-foreground text-xs font-semibold px-4 py-2 rounded-lg shadow-md flex items-center gap-2 w-full text-center h-full\">\n              <span className=\"flex-1 text-left\">{currentError}</span>\n              <button type=\"button\" onClick={handleCloseError} className=\"shrink-0\">\n                <XCircle className=\"h-4 w-4\" />\n                <span className=\"sr-only\">Close error message</span>\n              </button>\n            </div>\n          )}\n        </div>\n      </div>\n      <div className=\"flex justify-center items-center w-full\">\n        <Button\n          type={isSubmit ? 'submit' : 'button'}\n          onClick={!isSubmit ? onNext : undefined}\n          className=\"h-auto justify-between w-full px-5 py-4 text-base font-body border-2 border-white shadow-xl tracking-widest\"\n          disabled={disabled}\n        >\n          <span>{actionLabel}</span>\n          {isSubmit && disabled ? (\n            <svg\n              className=\"animate-spin h-5 w-5\"\n              xmlns=\"http://www.w3.org/2000/svg\"\n              fill=\"none\"\n              viewBox=\"0 0 24 24\"\n            >\n              <circle\n                className=\"opacity-25\"\n                cx=\"12\"\n                cy=\"12\"\n                r=\"10\"\n                stroke=\"currentColor\"\n                strokeWidth=\"4\"\n              ></circle>\n              <path\n                className=\"opacity-75\"\n                fill=\"currentColor\"\n                d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"\n              ></path>\n            </svg>\n          ) : (\n            <ArrowRight className=\"h-5 w-5\" />\n          )}\n        </Button>\n      </div>\n    </div>\n  );\n}\n",
    "app/src/components/home-redirect.tsx": "/**\n * @file src/components/home-redirect.tsx\n * @description This client component handles the initial redirection. When a user lands on the root page, this component generates a new UUID and programmatically redirects them to `/[uuid]`, effectively starting a new, unique application session.\n */\n'use client';\n\nimport { useEffect } from 'react';\nimport { useRouter } from 'next/navigation';\nimport { v4 as uuidv4 } from 'uuid';\n\nexport default function HomeRedirect() {\n  const router = useRouter();\n\n  useEffect(() => {\n    const newUuid = uuidv4();\n    router.replace(`/${newUuid}`);\n  }, [router]);\n\n  return (\n    <div className=\"relative flex flex-col min-h-screen bg-background text-foreground font-body items-center justify-center\">\n      <div className=\"relative w-24 h-24\">\n        <svg\n          className=\"animate-spin h-full w-full text-primary\"\n          xmlns=\"http://www.w3.org/2000/svg\"\n          fill=\"none\"\n          viewBox=\"0 0 100 100\"\n        >\n          <path\n            d=\"M 50,10 A 40,40 0 1 1 10,50\"\n            fill=\"none\"\n            stroke=\"currentColor\"\n            strokeWidth=\"10\"\n            strokeLinecap=\"round\"\n          />\n        </svg>\n      </div>\n    </div>\n  );\n}\n",
    "app/src/lib/schema.ts": "/**\n * @file src/lib/schema.ts\n * @description This file defines all Zod schemas for form validation and data transformation. It serves as the single source of truth for the application's data structure, validation rules, and the logic for transforming form data into the flat payload required by backend APIs.\n */\nimport { z } from 'zod';\nimport { differenceInYears, parse, isValid, format } from 'date-fns';\n\nexport const insuranceFormSchema = z.object({\n  firstName: z.string().min(1, { message: \"First name is required.\" }),\n  lastName: z.string().min(1, { message: \"Last name is required.\" }),\n  phone: z.string().min(14, { message: \"Please enter a complete phone number.\" }),\n  email: z.string().min(1, { message: \"Email is required.\" }).email({ message: \"Invalid email address.\" }),\n  dob: z.string()\n    .min(10, { message: \"Please enter a complete date of birth.\" })\n    .refine((dob) => isValid(parse(dob, 'MM/dd/yyyy', new Date())), {\n      message: \"Invalid date. Please use MM/dd/yyyy format.\",\n    })\n    .refine((dob) => {\n        const parsedDate = parse(dob, 'MM/dd/yyyy', new Date());\n        if (!isValid(parsedDate)) return false;\n        const age = differenceInYears(new Date(), parsedDate);\n        return age >= 45 && age <= 80;\n    }, {\n        message: \"You must be between 45 and 80 years old to be eligible.\"\n    }),\n  gender: z.string().min(1, { message: \"Please select a gender.\" }),\n});\nexport type InsuranceFormValues = z.infer<typeof insuranceFormSchema>;\n\nexport const additionalQuestionsObjectSchema = z.object({\n  differentOwner: z.string().min(1, { message: \"Please select an option.\" }),\n  healthQuestion1: z.string().min(1, { message: \"This question is required.\" }),\n  healthQuestion2: z.string().min(1, { message: \"This question is required.\" }),\n  healthQuestion3: z.string().min(1, { message: \"This question is required.\" }),\n  tobaccoUse: z.string().min(1, { message: 'This question is required.' }),\n  existingPolicies: z.string().min(1, { message: 'This question is required.' }),\n  otherHealthIssues: z.string().min(1, { message: 'This question is required.' }),\n  otherHealthIssuesDetails: z.string().optional(),\n});\nexport type AdditionalQuestionsFormValues = z.infer<typeof additionalQuestionsObjectSchema>;\n\n\nexport const beneficiaryFormSchema = z.object({\n  addressStreet: z.string().min(1, { message: \"Address is required.\" }),\n  addressApt: z.string().optional(),\n  addressCity: z.string().min(1, { message: \"City is required.\" }),\n  addressState: z.string().length(2, { message: \"State must be a 2-letter abbreviation.\" }),\n  addressZip: z.string().min(1, { message: \"Zip code is required.\" }),\n  beneficiaryFirstName: z.string().min(1, { message: \"First name is required.\" }),\n  beneficiaryLastName: z.string().min(1, { message: \"Last name is required.\" }),\n  beneficiaryPhone: z.string().optional(),\n  beneficiaryDob: z.string().optional().refine((dob) => {\n    if (!dob || dob === \"\") return true; // Optional field is valid if empty\n    // If a value is present, it must be a complete and valid date\n    return dob.length === 10 && isValid(parse(dob, 'MM/dd/yyyy', new Date()));\n  }, {\n    message: \"Invalid date. Please use MM/dd/yyyy format.\",\n  }),\n  beneficiaryRelation: z.string().min(1, { message: \"Relationship is required.\" }),\n  faceAmount: z.string().min(1, { message: \"Coverage amount is required.\" }),\n  effectiveDate: z.string().optional().refine((date) => {\n    if (!date || date === \"\") return true; // Optional field\n    if (date.length !== 10) return false; // Must be full date if entered\n    const parsedDate = parse(date, 'MM/dd/yyyy', new Date());\n    if (!isValid(parsedDate)) return false; // Must be a valid date\n    const today = new Date();\n    today.setHours(0, 0, 0, 0);\n    return parsedDate >= today; // Must be today or future\n  }, {\n    message: \"Date must be valid (MM/dd/yyyy) and not in the past.\",\n  }),\n});\nexport type BeneficiaryFormValues = z.infer<typeof beneficiaryFormSchema>;\n\nexport const basePaymentFormSchema = z.object({\n  paymentMethod: z.enum(['bank', 'card']),\n  // Bank fields (optional)\n  paymentAccountHolderName: z.string().optional(),\n  paymentAccountNumber: z.string().optional(),\n  paymentRoutingNumber: z.string().optional(),\n  // Card fields (optional)\n  cardholderName: z.string().optional(),\n  cardNumber: z.string().optional(),\n  cardExpiry: z.string().optional(),\n  cardCvc: z.string().optional(),\n  billingZip: z.string().optional(),\n});\n\nexport const paymentFormSchema = basePaymentFormSchema.superRefine((data, ctx) => {\n    if (data.paymentMethod === 'bank') {\n        if (!data.paymentAccountHolderName || data.paymentAccountHolderName.trim() === '') {\n            ctx.addIssue({ code: 'custom', path: ['paymentAccountHolderName'], message: 'Account holder name is required.' });\n        }\n        if (!data.paymentAccountNumber || data.paymentAccountNumber.trim() === '') {\n            ctx.addIssue({ code: 'custom', path: ['paymentAccountNumber'], message: 'Account number is required.' });\n        }\n        if (!data.paymentRoutingNumber || !/^\\d{9}$/.test(data.paymentRoutingNumber)) {\n            ctx.addIssue({ code: 'custom', path: ['paymentRoutingNumber'], message: 'A valid 9-digit routing number is required.' });\n        }\n    } else if (data.paymentMethod === 'card') {\n        if (!data.cardholderName || data.cardholderName.trim() === '') {\n            ctx.addIssue({ code: 'custom', path: ['cardholderName'], message: 'Cardholder name is required.' });\n        }\n        if (!data.cardNumber || !/^\\d{16}$/.test(data.cardNumber)) {\n            ctx.addIssue({ code: 'custom', path: ['cardNumber'], message: 'A valid 16-digit card number is required.' });\n        }\n        if (!data.cardExpiry || !/^(0[1-9]|1[0-2])\\/\\d{2}$/.test(data.cardExpiry)) {\n            ctx.addIssue({ code: 'custom', path: ['cardExpiry'], message: 'Expiry must be in MM/YY format.' });\n        }\n        if (!data.cardCvc || !/^\\d{3,4}$/.test(data.cardCvc)) {\n            ctx.addIssue({ code: 'custom', path: ['cardCvc'], message: 'A valid CVC is required.' });\n        }\n        if (!data.billingZip || !/^\\d{5}$/.test(data.billingZip)) {\n            ctx.addIssue({ code: 'custom', path: ['billingZip'], message: 'A valid 5-digit ZIP code is required.' });\n        }\n    }\n});\nexport type PaymentFormValues = z.infer<typeof paymentFormSchema>;\n\n// This is the base schema with all fields, but without the final payment validation.\n// This is useful for things like .partial() which don't work on refined schemas.\nexport const baseFormSchema = insuranceFormSchema\n .merge(additionalQuestionsObjectSchema)\n .merge(beneficiaryFormSchema)\n .merge(basePaymentFormSchema);\n\n// This is the final schema used for the form, with all validation rules.\nexport const fullFormSchema = insuranceFormSchema\n .merge(additionalQuestionsObjectSchema)\n .merge(beneficiaryFormSchema)\n .merge(paymentFormSchema);\n\nexport type FormValues = z.infer<typeof fullFormSchema>;\n\n\n// Centralized API Payload Logic\n\n// 1. Define the FLAT payload schema that the API expects.\nexport const FinalPayloadSchema = z.object({\n  referenceId: z.string().uuid().optional(),\n  email: z.string().email().optional(),\n  firstName: z.string().min(1).optional(),\n  lastName: z.string().min(1).optional(),\n  addressStreet: z.string().min(1).optional(),\n  addressCity: z.string().min(1).optional(),\n  addressState: z.string().length(2).optional(),\n  addressZip: z.string().min(1).optional(),\n  dob: z.string().optional(), // Formatted as MM/dd/yyyy\n  phone: z.string().optional(), // Digits only\n  gender: z.string().optional(),\n  beneficiaryFirstName: z.string().min(1).optional(),\n  beneficiaryLastName: z.string().min(1).optional(),\n  beneficiaryRelation: z.string().min(1).optional(),\n  beneficiaryDob: z.string().optional(), // Formatted as MM/dd/yyyy\n  beneficiaryPhone: z.string().optional(), // Digits only\n  beneficiaryPercentage: z.string().optional(),\n  faceAmount: z.string().optional(),\n  // Payment Info - now includes both bank and card\n  paymentMethod: z.enum(['bank', 'card']).optional(),\n  paymentAccountHolderName: z.string().min(1).optional(),\n  paymentRoutingNumber: z.string().length(9).optional(),\n  paymentAccountNumber: z.string().min(1).optional(),\n  cardholderName: z.string().min(1).optional(),\n  cardNumber: z.string().min(1).optional(),\n  cardExpiry: z.string().min(1).optional(),\n  cardCvc: z.string().min(1).optional(),\n  billingZip: z.string().min(1).optional(),\n  // Health and Policy Questions\n  differentOwner: z.string().optional(),\n  healthQuestion1: z.string().optional(),\n  healthQuestion2: z.string().optional(),\n  healthQuestion3: z.string().optional(),\n  tobaccoUse: z.string().optional(),\n  existingPolicies: z.string().optional(),\n  otherHealthIssues: z.string().optional(),\n  otherHealthIssuesDetails: z.string().optional(),\n  effectiveDate: z.string().optional(), // Formatted as MM/dd/yyyy\n}).partial(); // Make all fields optional to handle partial form data\nexport type FinalPayload = z.infer<typeof FinalPayloadSchema>;\n\n\nexport const formatPhone = (phoneString?: string) => {\n  if (!phoneString) return '';\n  return phoneString.replace(/\\D/g, '');\n};\n\nexport const capitalize = (s?: string) => {\n  if (!s || s.length === 0) return '';\n  return s.charAt(0).toUpperCase() + s.slice(1);\n};\n\nexport const getFullStreet = (street?: string, apt?: string) => {\n  if (!street) return '';\n  if (apt && apt.trim() !== '') {\n    return `${street}, ${apt}`;\n  }\n  return street;\n};\n\n\n// 2. Create the dedicated, pure transformation function to build the FLAT payload.\nexport function transformDataForApi(formData: Partial<FormValues>): FinalPayload {\n  const formatDate = (dateString?: string) => {\n    if (!dateString) return '';\n    if (!/^\\d{4}-\\d{2}-\\d{2}$/.test(dateString) && !/^\\d{2}\\/\\d{2}\\/\\d{4}$/.test(dateString)) return dateString;\n    if (dateString.includes('/')) return dateString; // Already in MM/dd/yyyy\n    const [year, month, day] = dateString.split('-');\n    const formatted = `${month}/${day}/${year}`;\n    return formatted;\n  };\n  \n  const formatEffectiveDate = (dateString?: string) => {\n    if (dateString) {\n      return formatDate(dateString);\n    }\n    return format(new Date(), 'MM/dd/yyyy');\n  };\n\n  const rawData: Record<string, any> = {\n    referenceId: (formData as any).referenceId, // For final submission\n    email: formData.email,\n    firstName: formData.firstName,\n    lastName: formData.lastName,\n    addressStreet: getFullStreet(formData.addressStreet, formData.addressApt),\n    addressCity: formData.addressCity,\n    addressState: formData.addressState,\n    addressZip: formData.addressZip,\n    dob: formatDate(formData.dob),\n    phone: formatPhone(formData.phone),\n    gender: capitalize(formData.gender),\n    beneficiaryFirstName: formData.beneficiaryFirstName,\n    beneficiaryLastName: formData.beneficiaryLastName,\n    beneficiaryDob: formatDate(formData.beneficiaryDob),\n    beneficiaryPhone: formatPhone(formData.beneficiaryPhone),\n    beneficiaryRelation: formData.beneficiaryRelation,\n    beneficiaryPercentage: \"100\",\n    faceAmount: formData.faceAmount ? formData.faceAmount.replace(/[^0-9]/g, '') : '',\n    // Payment Fields\n    paymentMethod: formData.paymentMethod,\n    paymentAccountHolderName: formData.paymentAccountHolderName,\n    paymentRoutingNumber: formData.paymentRoutingNumber,\n    paymentAccountNumber: formData.paymentAccountNumber,\n    cardholderName: formData.cardholderName,\n    cardNumber: formData.cardNumber,\n    cardExpiry: formData.cardExpiry,\n    cardCvc: formData.cardCvc,\n    billingZip: formData.billingZip,\n    // Health questions\n    differentOwner: formData.differentOwner || 'no',\n    healthQuestion1: formData.healthQuestion1 || 'no',\n    healthQuestion2: formData.healthQuestion2 || 'no',\n    healthQuestion3: formData.healthQuestion3 || 'no',\n    tobaccoUse: formData.tobaccoUse || 'no',\n    existingPolicies: formData.existingPolicies || 'no',\n    otherHealthIssues: formData.otherHealthIssues || 'no',\n    otherHealthIssuesDetails: formData.otherHealthIssuesDetails,\n    effectiveDate: formatEffectiveDate(formData.effectiveDate),\n  };\n  \n  return FinalPayloadSchema.parse(rawData);\n}\n\n// 3. Create a dedicated transformation for the LEAD API call.\n// This function prepares the data for the step 3 lead submission.\n// It removes payment-related fields to avoid validation errors for data that hasn't been collected yet.\nexport function transformDataForLeadApi(formData: Partial<FormValues>): Omit<FinalPayload, 'paymentAccountHolderName' | 'paymentRoutingNumber' | 'paymentAccountNumber' | 'cardholderName' | 'cardNumber' | 'cardExpiry' | 'cardCvc' | 'billingZip'> {\n  // First, get the fully transformed payload\n  const fullPayload = transformDataForApi({\n    ...formData,\n    paymentAccountHolderName: undefined,\n    paymentRoutingNumber: undefined,\n    paymentAccountNumber: undefined,\n    cardholderName: undefined,\n    cardNumber: undefined,\n    cardExpiry: undefined,\n    cardCvc: undefined,\n    billingZip: undefined,\n  });\n  \n  // Then, destructure to remove the payment fields.\n  const { \n    paymentAccountHolderName, \n    paymentRoutingNumber, \n    paymentAccountNumber, \n    cardholderName,\n    cardNumber,\n    cardExpiry,\n    cardCvc,\n    billingZip,\n    ...leadPayload // The rest of the object is what we want\n  } = fullPayload;\n\n  return leadPayload;\n}\n",
    "app/src/lib/steps.ts": "/**\n * @file src/lib/steps.ts\n * @description This file is the single source of truth for the application's multi-step flow. It defines unique identifiers for each step, the sequence of the steps, and their corresponding descriptions for display in the admin dashboard.\n */\n/**\n * @fileOverview Centralized definition for the application's multi-step flow.\n * This file serves as the single source of truth for step identifiers, sequence,\n * and associated metadata like descriptions.\n */\n\n// Use a const object for step identifiers to allow for easy access and maintainability.\n// Using strings instead of numbers makes the flow logic more readable and less prone to off-by-one errors.\nexport const STEP_IDS = {\n  USER_INFO: 'USER_INFO',\n  HEALTH_QUESTIONS: 'HEALTH_QUESTIONS',\n  BENEFICIARY: 'BENEFICIARY',\n  PAYMENT: 'PAYMENT',\n  SELF_ENROLL_LOADING: 'SELF_ENROLL_LOADING',\n  SELF_ENROLL_CONTRACT: 'SELF_ENROLL_CONTRACT',\n  SELF_ENROLL_COMPLETE: 'SELF_ENROLL_COMPLETE',\n  AGENT_HANDOFF: 'AGENT_HANDOFF',\n} as const;\n\nexport type StepId = keyof typeof STEP_IDS;\n\n// Defines the primary, linear sequence of the form before branching.\nexport const FORM_STEPS: StepId[] = [\n  STEP_IDS.USER_INFO,\n  STEP_IDS.HEALTH_QUESTIONS,\n  STEP_IDS.BENEFICIARY,\n  STEP_IDS.PAYMENT,\n];\n\n// All possible steps in the application, in order.\n// This is the single source of truth for the step sequence.\nexport const ALL_STEPS: StepId[] = [\n    ...FORM_STEPS,\n    STEP_IDS.SELF_ENROLL_LOADING,\n    STEP_IDS.SELF_ENROLL_CONTRACT,\n    STEP_IDS.SELF_ENROLL_COMPLETE,\n    STEP_IDS.AGENT_HANDOFF,\n];\n\nexport const stepDescriptions: Record<StepId, string> = {\n  [STEP_IDS.USER_INFO]: 'Started Application',\n  [STEP_IDS.HEALTH_QUESTIONS]: 'Answered Health Questions',\n  [STEP_IDS.BENEFICIARY]: 'Entered Beneficiary Info',\n  [STEP_IDS.PAYMENT]: 'Entered Payment Info',\n  [STEP_IDS.SELF_ENROLL_LOADING]: 'Started Self-Enroll',\n  [STEP_IDS.SELF_ENROLL_CONTRACT]: 'SMS Verification Sent',\n  [STEP_IDS.SELF_ENROLL_COMPLETE]: 'Self-Enroll Complete',\n  [STEP_IDS.AGENT_HANDOFF]: 'Agent Handoff Chosen',\n};\n\n// Provides a numerical index for each step (1-based), useful for progress indicators.\nexport const getStepNumber = (stepId: StepId): number => {\n    const index = ALL_STEPS.indexOf(stepId);\n    return index !== -1 ? index + 1 : 0;\n}\n\nexport const getTotalSteps = (): number => {\n    return ALL_STEPS.length;\n}\n",
    "app/src/lib/utils.ts": "/**\n * @file src/lib/utils.ts\n * @description A collection of utility functions used throughout the application. This includes a helper for combining Tailwind CSS classes (`cn`) and various input formatters for phone numbers and dates.\n */\nimport { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n\nexport const formatPhoneNumber = (value: string) => {\n  const rawValue = value.replace(/[^\\d]/g, '');\n  let formattedValue = '';\n  if (rawValue.length > 0) {\n    formattedValue = '(' + rawValue.substring(0, 3);\n  }\n  if (rawValue.length >= 4) {\n    formattedValue += ') ' + rawValue.substring(3, 6);\n  }\n  if (rawValue.length >= 7) {\n    formattedValue += '-' + rawValue.substring(6, 10);\n  }\n  return formattedValue;\n};\n\nexport const formatLastFour = (value: string) => {\n  return value.replace(/[^\\d]/g, \"\").substring(0, 4);\n};\n\nexport const formatDateInput = (value: string) => {\n  const rawValue = value.replace(/\\D/g, '').slice(0, 8); // only digits, max 8\n  const month = rawValue.slice(0, 2);\n  const day = rawValue.slice(2, 4);\n  const year = rawValue.slice(4, 8);\n\n  if (rawValue.length > 4) {\n    return `${month}/${day}/${year}`;\n  } else if (rawValue.length > 2) {\n    return `${month}/${day}`;\n  } else {\n    return month;\n  }\n};\n",
    "app/src/hooks/use-socket.ts": "/**\n * @file src/hooks/use-socket.ts\n * @description This custom React hook manages the WebSocket connection to the backend server. It handles connecting, subscribing to updates for a specific session ID, and gracefully disconnecting. It is used to receive real-time updates during the self-enrollment process.\n */\n'use client';\n\nimport { useEffect, useRef } from 'react';\nimport { io, type Socket } from 'socket.io-client';\n\ninterface ServerToClientEvents {\n  subscribed: (data: { message: string }) => void;\n  initialData: (data: any) => void;\n  customUpdate: (data: any) => void;\n}\n\ninterface ClientToServerEvents {\n  subscribe: (data: { id: string }) => void;\n}\n\nexport const useSocket = (subscribeId: string | null, callback: (data: any) => void) => {\n  const socketRef = useRef<Socket<ServerToClientEvents, ClientToServerEvents> | null>(null);\n\n  useEffect(() => {\n    if (!subscribeId) {\n      if(socketRef.current) {\n        socketRef.current.disconnect();\n        socketRef.current = null;\n      }\n      return;\n    }\n    \n    const backendUrl = process.env.NEXT_PUBLIC_BACKEND_URL;\n    if (!backendUrl) {\n      console.error('BACKEND_URL environment variable is not set for WebSocket.');\n      callback({ error: { title: 'Configuration Error', message: 'The application is missing the backend URL.' } });\n      return;\n    }\n\n    const socket: Socket<ServerToClientEvents, ClientToServerEvents> = io(backendUrl, {\n      path: '/socket',\n    });\n\n    socketRef.current = socket;\n\n    socket.on('connect', () => {\n      socket.emit('subscribe', { id: subscribeId });\n    });\n\n    socket.on('subscribed', (data) => {\n      // Optional: Handle subscription confirmation\n    });\n\n    socket.on('initialData', (data) => {\n      // Optional: Handle initial data if needed\n    });\n\n    socket.on('customUpdate', (data) => {\n      callback(data);\n    });\n\n    socket.on('connect_error', (err) => {\n      console.error('Socket.IO connection error:', err);\n      callback({ error: { title: 'Connection Error', message: 'Could not connect to the enrollment service. Please try again later.' } });\n    });\n\n    return () => {\n      socket.disconnect();\n      socketRef.current = null;\n    };\n  }, [subscribeId, callback]);\n\n  return socketRef;\n};\n",
    "app/src/hooks/use-toast.ts": "/**\n * @file src/hooks/use-toast.ts\n * @description A custom hook for managing and displaying toast notifications. It provides a simple `toast()` function to trigger notifications and handles the state management for displaying and dismissing them.\n */\n\"use client\"\n\n// Inspired by react-hot-toast library\nimport * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n",
    "src/config/site.ts": "/**\n * @file src/config/site.ts\n * @description This file contains the site-wide configuration, such as the application name and description. This information is used for metadata in the root layout.\n */\nexport const siteConfig = {\n  name: 'Final Expense Benefits',\n  description: 'Simplified final expense insurance application.',\n};\n\nexport type SiteConfig = typeof siteConfig;\n",
    "package.json": "/**\n * @file package.json\n * @description This file defines the project's dependencies, dev dependencies, and scripts. It is the central configuration file for npm, managing all the packages required to build and run the application.\n */\n{\n  \"name\": \"nextn\",\n  \"version\": \"0.1.0\",\n  \"private\": true,\n  \"scripts\": {\n    \"dev\": \"next dev\",\n    \"genkit:dev\": \"genkit start -- tsx src/ai/dev.ts\",\n    \"genkit:watch\": \"genkit start -- tsx --watch src/ai/dev.ts\",\n    \"build\": \"next build\",\n    \"start\": \"next start\",\n    \"lint\": \"next lint\",\n    \"typecheck\": \"tsc --noEmit\",\n    \"test\": \"vitest\",\n    \"test:ui\": \"vitest --ui\"\n  },\n  \"dependencies\": {\n    \"@genkit-ai/googleai\": \"^1.13.0\",\n    \"@genkit-ai/next\": \"^1.13.0\",\n    \"@hookform/resolvers\": \"^4.1.3\",\n    \"@radix-ui/react-accordion\": \"^1.2.3\",\n    \"@radix-ui/react-alert-dialog\": \"^1.1.6\",\n    \"@radix-ui/react-avatar\": \"^1.1.3\",\n    \"@radix-ui/react-checkbox\": \"^1.1.4\",\n    \"@radix-ui/react-collapsible\": \"^1.1.11\",\n    \"@radix-ui/react-dialog\": \"^1.1.6\",\n    \"@radix-ui/react-dropdown-menu\": \"^2.1.6\",\n    \"@radix-ui/react-label\": \"^2.1.2\",\n    \"@radix-ui/react-menubar\": \"^1.1.6\",\n    \"@radix-ui/react-popover\": \"^1.1.6\",\n    \"@radix-ui/react-progress\": \"^1.1.2\",\n    \"@radix-ui/react-radio-group\": \"^1.2.3\",\n    \"@radix-ui/react-scroll-area\": \"^1.2.3\",\n    \"@radix-ui/react-select\": \"^2.1.6\",\n    \"@radix-ui/react-separator\": \"^1.1.2\",\n    \"@radix-ui/react-slider\": \"^1.2.3\",\n    \"@radix-ui/react-slot\": \"^1.2.3\",\n    \"@radix-ui/react-switch\": \"^1.1.3\",\n    \"@radix-ui/react-tabs\": \"^1.1.3\",\n    \"@radix-ui/react-toast\": \"^1.2.6\",\n    \"@radix-ui/react-tooltip\": \"^1.1.8\",\n    \"@react-google-maps/api\": \"^2.19.3\",\n    \"axios\": \"^1.7.2\",\n    \"class-variance-authority\": \"^0.7.1\",\n    \"clsx\": \"^2.1.1\",\n    \"date-fns\": \"^3.6.0\",\n    \"dotenv\": \"^16.5.0\",\n    \"embla-carousel-react\": \"^8.6.0\",\n    \"firebase\": \"^11.9.1\",\n    \"genkit\": \"^1.13.0\",\n    \"lucide-react\": \"^0.475.0\",\n    \"next\": \"15.3.5\",\n    \"patch-package\": \"^8.0.0\",\n    \"react\": \"19.1.0\",\n    \"react-day-picker\": \"9.0.4\",\n    \"react-dom\": \"19.1.0\",\n    \"react-hook-form\": \"^7.54.2\",\n    \"recharts\": \"^2.15.1\",\n    \"socket.io-client\": \"^4.7.5\",\n    \"tailwind-merge\": \"^2.3.0\",\n    \"tailwindcss-animate\": \"^1.0.7\",\n    \"use-places-autocomplete\": \"^4.0.1\",\n    \"uuid\": \"^9.0.1\",\n    \"zod\": \"^3.24.2\"\n  },\n  \"devDependencies\": {\n    \"@testing-library/jest-dom\": \"^6.4.6\",\n    \"@testing-library/react\": \"^16.0.0\",\n    \"@testing-library/user-event\": \"^14.5.2\",\n    \"@types/node\": \"^20\",\n    \"@types/react\": \"^19.1.4\",\n    \"@types/react-dom\": \"^19.1.0\",\n    \"@types/uuid\": \"^9.0.8\",\n    \"@vitejs/plugin-react\": \"^4.3.1\",\n    \"@vitest/ui\": \"^1.6.0\",\n    \"genkit-cli\": \"^1.13.0\",\n    \"jsdom\": \"^24.1.0\",\n    \"postcss\": \"^8\",\n    \"string-replace-loader\": \"^3.1.0\",\n    \"tailwindcss\": \"^3.4.1\",\n    \"typescript\": \"^5\",\n    \"vitest\": \"^1.6.0\"\n  }\n}\n",
    "next.config.ts": "/**\n * @file next.config.ts\n * @description This is the main configuration file for the Next.js framework. It includes settings for TypeScript, ESLint, image optimization, environment variables, and Webpack customizations to ensure the project builds and runs correctly.\n */\nimport type {NextConfig} from 'next';\n\nconst nextConfig: NextConfig = {\n  /* config options here */\n  typescript: {\n    ignoreBuildErrors: true,\n  },\n  eslint: {\n    ignoreDuringBuilds: true,\n  },\n  images: {\n    remotePatterns: [\n      {\n        protocol: 'https',\n        hostname: 'placehold.co',\n        port: '',\n        pathname: '/**',\n      },\n    ],\n  },\n  env: {\n    NEXT_PUBLIC_BACKEND_URL: process.env.BACKEND_URL,\n    NEXT_PUBLIC_GOOGLE_PLACES_API_KEY: process.env.NEXT_PUBLIC_GOOGLE_PLACES_API_KEY,\n  },\n  webpack: (config, { isServer }) => {\n    config.externals.push('pino-pretty', 'lokijs', 'encoding');\n    // This is a workaround for a warning in the 'handlebars' library used by a dependency.\n    config.module.rules.push({\n      test: /node_modules\\/handlebars\\/lib\\/index\\.js$/,\n      loader: 'string-replace-loader',\n      options: {\n        search: 'require.extensions',\n        replace: 'null',\n      },\n    });\n    return config;\n  },\n};\n\nexport default nextConfig;\n",
    "tailwind.config.ts": "/**\n * @file tailwind.config.ts\n * @description This is the configuration file for Tailwind CSS. It defines the application's design system, including the color palette, fonts, keyframe animations, and custom theme extensions for a consistent and maintainable UI.\n */\nimport type {Config} from 'tailwindcss';\n\nexport default {\n  darkMode: ['class'],\n  content: [\n    './src/pages/**/*.{js,ts,jsx,tsx,mdx}',\n    './src/components/**/*.{js,ts,jsx,tsx,mdx}',\n    './src/app/**/*.{js,ts,jsx,tsx,mdx}',\n  ],\n  theme: {\n    extend: {\n      fontFamily: {\n        body: ['StyreneAWeb', 'sans-serif'],\n        headline: ['StyreneAWeb', 'sans-serif'],\n        code: ['monospace'],\n      },\n      colors: {\n        background: 'hsl(var(--background))',\n        foreground: 'hsl(var(--foreground))',\n        card: {\n          DEFAULT: 'hsl(var(--card))',\n          foreground: 'hsl(var(--card-foreground))',\n        },\n        popover: {\n          DEFAULT: 'hsl(var(--popover))',\n          foreground: 'hsl(var(--popover-foreground))',\n        },\n        primary: {\n          DEFAULT: 'hsl(var(--primary))',\n          foreground: 'hsl(var(--primary-foreground))',\n        },\n        secondary: {\n          DEFAULT: 'hsl(var(--secondary))',\n          foreground: 'hsl(var(--secondary-foreground))',\n        },\n        muted: {\n          DEFAULT: 'hsl(var(--muted))',\n          foreground: 'hsl(var(--muted-foreground))',\n        },\n        accent: {\n          DEFAULT: 'hsl(var(--accent))',\n          foreground: 'hsl(var(--accent-foreground))',\n        },\n        destructive: {\n          DEFAULT: 'hsl(var(--destructive))',\n          foreground: 'hsl(var(--destructive-foreground))',\n        },\n        success: {\n          DEFAULT: 'hsl(var(--success))',\n          foreground: 'hsl(var(--success-foreground))',\n        },\n        border: 'hsl(var(--border))',\n        input: 'hsl(var(--input))',\n        ring: 'hsl(var(--ring))',\n        chart: {\n          '1': 'hsl(var(--chart-1))',\n          '2': 'hsl(var(--chart-2))',\n          '3': 'hsl(var(--chart-3))',\n          '4': 'hsl(var(--chart-4))',\n          '5': 'hsl(var(--chart-5))',\n        },\n        sidebar: {\n          DEFAULT: 'hsl(var(--sidebar-background))',\n          foreground: 'hsl(var(--sidebar-foreground))',\n          primary: 'hsl(var(--sidebar-primary))',\n          'primary-foreground': 'hsl(var(--sidebar-primary-foreground))',\n          accent: 'hsl(var(--sidebar-accent))',\n          'accent-foreground': 'hsl(var(--sidebar-accent-foreground))',\n          border: 'hsl(var(--sidebar-border))',\n          ring: 'hsl(var(--sidebar-ring))',\n        },\n      },\n      borderRadius: {\n        lg: 'var(--radius)',\n        md: 'calc(var(--radius) - 2px)',\n        sm: 'calc(var(--radius) - 4px)',\n      },\n      keyframes: {\n        'accordion-down': {\n          from: {\n            height: '0',\n          },\n          to: {\n            height: 'var(--radix-accordion-content-height)',\n          },\n        },\n        'accordion-up': {\n          from: {\n            height: 'var(--radix-accordion-content-height)',\n          },\n          to: {\n            height: '0',\n          },\n        },\n        'shake': {\n          '10%, 90%': { transform: 'translate3d(-1px, 0, 0)' },\n          '20%, 80%': { transform: 'translate3d(2px, 0, 0)' },\n          '30%, 50%, 70%': { transform: 'translate3d(-4px, 0, 0)' },\n          '40%, 60%': { transform: 'translate3d(4px, 0, 0)' },\n        },\n        'fade-in-up': {\n          'from': { opacity: '0', transform: 'translateY(1rem)' },\n          'to': { opacity: '1', transform: 'translateY(0)' },\n        },\n        'fade-out-down': {\n          'from': { opacity: '1', transform: 'translateY(0)' },\n          'to': { opacity: '0', transform: 'translateY(1rem)' },\n        },\n        'grow-wiggle': {\n          '0%, 12%, 100%': { transform: 'scale(1) rotate(0deg)' },\n          '3%': { transform: 'scale(1.1) rotate(-2deg)' },\n          '6%': { transform: 'scale(1.1) rotate(2deg)' },\n          '9%': { transform: 'scale(1.1) rotate(-2deg)' },\n        }\n      },\n      animation: {\n        'accordion-down': 'accordion-down 0.2s ease-out',\n        'accordion-up': 'accordion-up 0.2s ease-out',\n        'shake': 'shake 0.82s cubic-bezier(.36,.07,.19,.97) both',\n        'fade-in-up': 'fade-in-up 0.3s ease-out',\n        'fade-out-down': 'fade-out-down 0.3s ease-out',\n        'grow-wiggle': 'grow-wiggle 4.5s ease-in-out infinite',\n      },\n    },\n  },\n  plugins: [require('tailwindcss-animate')],\n} satisfies Config;\n",
    "tsconfig.json": "/**\n * @file tsconfig.json\n * @description This is the configuration file for the TypeScript compiler. It sets the rules for how TypeScript should transpile the project's .ts and .tsx files into JavaScript, including module resolution, type checking strictness, and path aliases.\n */\n{\n  \"compilerOptions\": {\n    \"target\": \"ES2017\",\n    \"lib\": [\"dom\", \"dom.iterable\", \"esnext\"],\n    \"allowJs\": true,\n    \"skipLibCheck\": true,\n    \"strict\": true,\n    \"noEmit\": true,\n    \"esModuleInterop\": true,\n    \"module\": \"esnext\",\n    \"moduleResolution\": \"bundler\",\n    \"resolveJsonModule\": true,\n    \"isolatedModules\": true,\n    \"jsx\": \"preserve\",\n    \"incremental\": true,\n    \"plugins\": [\n      {\n        \"name\": \"next\"\n      }\n    ],\n    \"paths\": {\n      \"@/*\": [\"./src/*\"]\n    }\n  },\n  \"include\": [\"next-env.d.ts\", \"**/*.ts\", \"**/*.tsx\", \".next/types/**/*.ts\"],\n  \"exclude\": [\"node_modules\"]\n}\n",
    "components.json": "/**\n * @file components.json\n * @description This is the configuration file for the ShadCN UI library. It defines the project's UI style, component library aliases, and other settings required to generate new ShadCN components correctly.\n */\n{\n  \"$schema\": \"https://ui.shadcn.com/schema.json\",\n  \"style\": \"default\",\n  \"rsc\": true,\n  \"tsx\": true,\n  \"tailwind\": {\n    \"config\": \"tailwind.config.ts\",\n    \"css\": \"src/app/globals.css\",\n    \"baseColor\": \"neutral\",\n    \"cssVariables\": true,\n    \"prefix\": \"\"\n  },\n  \"aliases\": {\n    \"components\": \"@/components\",\n    \"utils\": \"@/lib/utils\",\n    \"ui\": \"@/components/ui\",\n    \"lib\": \"@/lib\",\n    \"hooks\": \"@/hooks\"\n  },\n  \"iconLibrary\": \"lucide\"\n}\n"
  }
}